<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="war-and-tomcat.deploy" name="Jep Module Building">
  
  <property file="local.properties" />
  
  <!-- Значения property - immutable, если BIN_HOME не был задан ранее, то берется из переменной окружения -->
  <property environment="env" />
  <property name="BIN_HOME" value="${env.BIN_HOME}" />

  <!-- Проверка, что BIN_HOME определен, иначе - ошибка -->
  <fail unless="BIN_HOME" message="Binary repository path not specified. Specify it either in environment variable %BIN_HOME% or use -DBIN_HOME=... command line argument." />

  <property file="dependency.properties" />

  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${ANT-CONTRIG_LIB}"/>
    </classpath>
  </taskdef>

  <property file="build.properties" />
  <property file="test.properties" />

  <!-- Объявление общих переменных -->
  <property name="JAVA_DOC_DIR" value="../Doc/App/AutoGen" />
  <property name="LOG_LEVEL" value="info" />
  <property name="test.src.dir" value="src/java;test/java" />
  <property name="testng.report.dir" value="test-output" />
  <property name="test.conf.dir" value="test/resources" />
  <property name="cores.count" value="${env.NUMBER_OF_PROCESSORS}"/>
  <property name="JAR_TEMP" value="build-lib"/>
  <tstamp>
    <format pattern="yyyyMMdd_HHmmss" property="timestamp" />
  </tstamp>
  
  <!-- Общие наборы файлов -->
  <path id="libs">
    <pathelement location="${COMMONS-FILEUPLOAD_LIB}" />
    <pathelement location="${JEPRIA-AUTO_LIB}" />
    <pathelement location="${JEPRIA_LIB}" />
    <pathelement location="${JEPRIA-REPORT_LIB}" />
    <pathelement location="${JEPRIA-TEST_LIB}" />
    <pathelement location="${GWT-DEV_LIB}" />
    <pathelement location="${GWT-LOG_LIB}" />
    <pathelement location="${GWT-SERVLET_LIB}" />
    <pathelement location="${GWT-THEME_LIB}" />
    <pathelement location="${GWT-USER_LIB}" />
    <pathelement location="${JASPERREPORTS_LIB}" />
    <pathelement location="${JUNIT_LIB}" />
    <pathelement location="${LOG4J_LIB}" />
    <pathelement location="${SERVLET-API_LIB}" />
    <pathelement location="${VALIDATION-API_LIB}" />
    <pathelement location="${VALIDATION-API-SOURCES_LIB}" />
  	<pathelement location="${SSO-UTILS_LIB}" />
  </path>
  
  <path id="jepria-toolkit-libs">
    <pathelement location="${FREEMARKER_LIB}" />
    <pathelement location="${JAVAPARSER-CORE_LIB}" />
    <pathelement location="${JEPRIA-TOOLKIT_LIB}" />
    <pathelement location="${JEPRIA_LIB}" />
    <pathelement location="${XERCESIMPL_LIB}" />
  </path>

  <path id="gwt-libs">
    <pathelement location="${GWT-DEV_LIB}" />
    <pathelement location="${GWT-LOG_LIB}" />
    <pathelement location="${GWT-USER_LIB}" />
  </path>

  <path id="selenium-libs">
    <pathelement location="${SELENIUM_LIB}" />
    
    <pathelement location="${APACHE-MIME4J_LIB}" />
    <pathelement location="${BEANSHELL_LIB}" />
    <pathelement location="${CGLIB-NODEP_LIB}" />
    <pathelement location="${COMMONS-CODEC_LIB}" />
    <pathelement location="${COMMONS-COLLECTIONS_LIB}" />
    <pathelement location="${COMMONS-EXEC_LIB}" />
    <pathelement location="${COMMONS-IO_LIB}" />
    <pathelement location="${COMMONS-JXPATH_LIB}" />
    <pathelement location="${COMMONS-LANG3_LIB}" />
    <pathelement location="${COMMONS-LOGGING_LIB}" />
    <pathelement location="${CSSPARSER_LIB}" />
    <pathelement location="${GUAVA_LIB}" />
    <pathelement location="${HAMCREST-CORE_LIB}" />
    <pathelement location="${HAMCREST-LIBRARY_LIB}" />
    <pathelement location="${HTMLUNIT_LIB}" />
    <pathelement location="${HTMLUNIT-CORE-JS_LIB}" />
    <pathelement location="${HTTPCLIENT_LIB}" />
    <pathelement location="${HTTPCORE_LIB}" />
    <pathelement location="${HTTPMIME_LIB}" />
    <pathelement location="${INI4J_LIB}" />
    <pathelement location="${JCOMMANDER_LIB}" />
    <pathelement location="${JETTY-WEBSOCKET_LIB}" />
    <pathelement location="${JNA_LIB}" />
    <pathelement location="${JNA-PLATFORM_LIB}" />
    <pathelement location="${JSON_LIB}" />
    <pathelement location="${JUNIT-DEP_LIB}" />
    <pathelement location="${NEKOHTML_LIB}" />
    <pathelement location="${NETTY_LIB}" />
    <pathelement location="${OPERADRIVER_LIB}" />
    <pathelement location="${PHANTOMJSDRIVER_LIB}" />
    <pathelement location="${PROTOBUF-JAVA_LIB}" />
    <pathelement location="${SAC_LIB}" />
    <pathelement location="${SERIALIZER_LIB}" />
    <pathelement location="${TESTNG_LIB}" />
    <pathelement location="${XALAN_LIB}" />
    <pathelement location="${XERCESIMPL_LIB}" />
    <pathelement location="${XML-APIS_LIB}" />
  </path>

  <path id="run-testng-libs">
    <pathelement location="build-test" />
    <!-- Необходима для работы в тестах jdbc -->
    <pathelement location="${OJDBC6_LIB}" />
    <path refid="selenium-libs" />
    <path refid="libs" />
  </path>

  <path id="tomcat-libs">
    <pathelement location="${TOMCAT-CATALINA-ANT_LIB}" />
    <pathelement location="${TOMCAT-COYOTE_LIB}" />
    <pathelement location="${TOMCAT-UTIL_LIB}" />
  </path>

  <fileset dir="build" id="class-web-jar">
    <include name="**/shared/" />
    <include name="**/server/" />
    <exclude name="**/text/*.class" />
  </fileset>

  <fileset dir="src/java" id="properties-web-jar">
    <include name="**/*Text.properties" />
    <include name="**/*Text_??.properties" />
    <include name="**/log4j.properties" />
  </fileset>

  
  <!-- Проверка наличия всех используемых библиотек (зависимостей) -->
  <target name="check-dependencies" >
  
    <echo message="Binary repository path: ${BIN_HOME}" />
  
    <propertyselector
        property="pack.list"
        delimiter=","
        match="([^\s]+(\_(?i)(lib|jslib))$)"
        select="\1"
        casesensitive="false" />
                 
    <echo message="Dependency checking..."/>
    <for list="${pack.list}" param="lib-path">
      <sequential>
        <if> <available file="${@{lib-path}}"/>
          <then/>
          <else>
            <echo>Required library '${@{lib-path}}' is absent</echo>
            <property name="DEPENDENCY_ABSENCE" value="true" />
          </else>
        </if>
      </sequential>
    </for>
    <if> <equals arg1="${DEPENDENCY_ABSENCE}" arg2="true" />
      <then>
        <echo>Dependency checking failed</echo>
        <fail message="BINARY REPOSITORY PROBABLY SHOULD BE UPDATED"/>
      </then>
    </if>
    <echo message="Dependency checking succeeded"/>
  </target>
  
  <target name="define-toolkit-appinstall">
    <taskdef name="startAppInstall" classname="com.technology.jep.jepriatoolkit.version.appinstall.StartAppInstall" classpathref="jepria-toolkit-libs" />
    <taskdef name="finishAppInstall" classname="com.technology.jep.jepriatoolkit.version.appinstall.FinishAppInstall" classpathref="jepria-toolkit-libs" />
  </target>
  
  <target name="create-structure">
    <taskdef classpathref="jepria-toolkit-libs" classname="com.technology.jep.jepriatoolkit.creator.application.ApplicationStructureCreator" name="applicationstructurecreator"/>
    <applicationstructurecreator applicationStructureFile="${APPLICATION_STRUCTURE_FILE_PATH}"/>
  </target>
  
  <target name="create-auto-test-structure">
    <taskdef classpathref="jepria-toolkit-libs" classname="com.technology.jep.jepriatoolkit.auto.test.creator.AutoTestStructureCreator" name="autoteststructurecreator"/>
    <autoteststructurecreator applicationStructureFile="${APPLICATION_STRUCTURE_FILE_PATH}" isOverrideExistsFiles="${IS_OVERRIDE_EXISTS_FILES}" />
  </target>
  
  <target name="create-xml">
    <taskdef classpathref="jepria-toolkit-libs" classname="com.technology.jep.jepriatoolkit.parser.ApplicationStructureParser" name="applicationstructureparser"/>
    <applicationstructureparser jepRiaVersion="${JEPRIA_VERSION}"/>
  </target>
  
  <target name="create">
    <taskdef classpathref="jepria-toolkit-libs" classname="com.technology.jep.jepriatoolkit.creator.form.ApplicationFormCreator" name="applicationformcreator" />
    <applicationformcreator applicationName="${APPLICATION_NAME}" moduleName="${MODULE_NAME}" />
  </target>
    
  <target name="add">
    <taskdef classpathref="jepria-toolkit-libs" classname="com.technology.jep.jepriatoolkit.creator.form.ApplicationFormCreator" name="applicationformcreator" />
    <applicationformcreator moduleName="${MODULE_NAME}" parentModuleName="${PARENT_MODULE_NAME}" applicationStructureFile="${APPLICATION_STRUCTURE_FILE_PATH}" />
  </target>
    
  <target name="only">
    <taskdef classpathref="jepria-toolkit-libs" name="partialformbuilder" classname="com.technology.jep.jepriatoolkit.switcher.PartialFormBuilder"/>
    <partialformbuilder forms="${FORMS}" targetConfig="${BUILD_CONFIG}" jepRiaVersion="${JEP_RIA_VERSION}" />
  </target>

  <!-- Инициализация переменных модуля  -->
  <target name="init" depends="check-dependencies">
    <for param="file">
      <path>
        <fileset dir="src/java" includes="**/main/*.gwt.xml" />
      </path>
      <sequential>
        <propertyregex input="@{file}" override="false" property="MODULE_NAME" regexp=".*\\([^\.]*)\.gwt.xml" replace="\1" />
        <propertyregex input="@{file}" override="false" property="MODULE_NAME_IN_PACKAGE" regexp=".*\\([^\.]*)\\main\\${MODULE_NAME}.gwt.xml" replace="\1" />
        <propertyregex input="@{file}" override="false" property="PROJECT_NAME_IN_PACKAGE" regexp=".*\\([^\.]*)\\${MODULE_NAME_IN_PACKAGE}\\main\\${MODULE_NAME}.gwt.xml" replace="\1" />
        <echo message="MODULE_NAME: ${MODULE_NAME}" />
        <echo message="MODULE_NAME_IN_PACKAGE: ${MODULE_NAME_IN_PACKAGE}" />
        <echo message="PROJECT_NAME_IN_PACKAGE: ${PROJECT_NAME_IN_PACKAGE}" />
        <property name="MODULE_PACKAGE" value="com/technology/${PROJECT_NAME_IN_PACKAGE}/${MODULE_NAME_IN_PACKAGE}" />
        <property name="RESOURCE_HOME" value="src/resources/${MODULE_PACKAGE}" />
        <property name="WAR_FILE_NAME" value="${MODULE_NAME}.war" />
        
        <!-- Определяем значения переменных по умолчанию. Если значения уже определены, то перезаписаны не будут. -->
        <property name="CONTEXT_PATH" value="/${MODULE_NAME}" />
        <echo message="CONTEXT_PATH: ${CONTEXT_PATH}" />
      
        <property name="DISTR_DIR" value="lib" />
        <echo message="DISTR_DIR: ${DISTR_DIR}" />

        <property name="DISTR_NAME" value="${MODULE_NAME}" />
        <echo message="DISTR_NAME: ${DISTR_NAME}" />

      </sequential>
    </for>
  </target>

  <!-- Создание файла лога -->
  <target name="start-log" depends="init">
    <mkdir dir="log" />
    <dirname file="." property="pdir" />
    <basename file="${pdir}" property="version" />
    <record loglevel="${LOG_LEVEL}" name="log/${timestamp}-${MODULE_NAME}-${version}-${PROJECT_NAME_IN_PACKAGE}.txt" />
  </target>

  <!-- Последовательность действий во многом обусловлена решением проблемы циклических  -->
  <!-- зависимостей между главным клиентским модулем и его подмодулями.          -->
  <target name="encode-and-compile" depends="all-text-encode, java-compile, all-gwt-compile, jasper-reports-compile" />

  <!-- Обработка текстовых ресурсов всех модулей -->
  <target depends="start-log" name="all-text-encode">
    <antcall target="for-each-client-module">
      <param name="action" value="client-module-text-encode" />
    </antcall>
  </target>

  <!-- Итератор по всем модулям -->
  <target name="for-each-client-module">
    <for param="file">
      <path>
        <fileset dir="src/java/${MODULE_PACKAGE}" includes="**/*.gwt.xml" />
      </path>
      <sequential>
        <propertyregex input="@{file}" override="yes" property="client.module.name" regexp=".*\\([^\.]*)\.gwt.xml" replace="\1" />
        <propertyregex input="@{file}" override="yes" property="client.module.package.name" regexp=".*\\([^\.]*)\\${client.module.name}.gwt.xml" replace="\1" />
        <antcall target="${action}" />
      </sequential>
    </for>
  </target>

  <!-- Обработка текстовых ресурсов модуля -->
  <target name="client-module-text-encode">
    <echo>client.module.name = ${client.module.name}</echo>
    <outofdate>
      <sourcefiles>
        <fileset dir="src/java/${MODULE_PACKAGE}/${client.module.package.name}/shared/text" includes="*.properties" />
      </sourcefiles>
      <targetfiles path="src/java/${MODULE_PACKAGE}/${client.module.package.name}/shared/text/${client.module.name}Text.java" />
      <sequential>
        <!-- Для Java -->
        <echo>Text resources is out of date</echo>
        <native2ascii dest="src/java/${MODULE_PACKAGE}/${client.module.package.name}/shared/text" encoding="UTF-8" ext=".target_properties" includes="**/*_Source.properties" src="src/java/${MODULE_PACKAGE}/${client.module.package.name}/shared/text" />
        <!-- Без удаления иногда возникают проблемы во время 'move' -->
        <delete file="src/java/${MODULE_PACKAGE}/${client.module.package.name}/shared/text/${client.module.name}Text.properties" />
        <move file="src/java/${MODULE_PACKAGE}/${client.module.package.name}/shared/text/${client.module.name}Text_Source.target_properties" tofile="src/java/${MODULE_PACKAGE}/${client.module.package.name}/shared/text/${client.module.name}Text.properties" />
        <!-- Для Gwt -->
        <java classname="com.google.gwt.i18n.tools.I18NSync">
          <classpath>
            <pathelement location="src/java" />
            <path refid="gwt-libs" />
          </classpath>
          <arg value="-out" />
          <arg value="src/java" />
          <arg value="com.technology.${PROJECT_NAME_IN_PACKAGE}.${MODULE_NAME_IN_PACKAGE}.${client.module.package.name}.shared.text.${client.module.name}Text" />
        </java>
      </sequential>
    </outofdate>
  </target>

  <target name="production-builder-check" depends="all-text-encode">
    <taskdef classname="com.technology.jep.jepriatoolkit.check.ProductionBuildChecker" classpathref="jepria-toolkit-libs" name="productionbuildchecker" />
    <productionbuildchecker moduleName="${MODULE_NAME}" packageName="${PROJECT_NAME_IN_PACKAGE}" property="productionBuildCheck" />
    <!-- Если непонятно почему сборка не соответствует продукционной, то соответствующее сообщение можно получить из свойства productionBuildCheckerError -->
    <!-- echo message="${productionBuildCheckerError}" /-->
  </target>
  
  <!-- Java-компиляция -->
  <target name="java-compile" depends="build-config, production-builder-check">
    <mkdir dir="build" />
    <javac debug="on" destdir="build" encoding="utf-8" includeantruntime="false" srcdir="src/java">
      <classpath refid="libs" />
    </javac>
  </target>

  <target name="java-compile-test-gwt" depends="java-compile">
    <mkdir dir="build-test" />
    <javac debug="on" destdir="build-test" encoding="utf-8" includeantruntime="false" srcdir="test-gwt/java">
      <classpath refid="libs" />
      <classpath>
        <pathelement location="build" />
      </classpath>
    </javac>
  </target>

  <target name="test-gwt" depends="java-compile-test-gwt">
    <java classname="junit.textui.TestRunner" fork="true" maxmemory="512M">
      <classpath refid="libs" />
      <classpath>
        <pathelement location="${JUNIT_LIB}" />
        <pathelement location="build" />
        <pathelement location="build-test" />
        <pathelement location="test-gwt/java" />
        <pathelement location="src/java" />
      </classpath>
      <arg value="com.technology.jep.jepriashowcase.test.JepRiaShowcaseTestSuite" />
      <jvmarg value="-Dgwt.args=-userAgents safari -draftCompile -prod" />
      <!-- Вызывает справку для аргументов JUnitShell (последний jvmarg "перебивает" все предыдущие jvmarg). -->
      <!-- <jvmarg value="-Dgwt.args=-help"/> -->
    </java>
  </target>

  <target name="testng-compile" depends="check-dependencies">
    <mkdir dir="build-test" />
    <javac destdir="build-test" encoding="utf-8" includeantruntime="false" srcdir="auto;${test.src.dir}" verbose="${full-compile}">
        <classpath refid="libs" />
        <classpath refid="selenium-libs" />
		<!-- TODO разнести компиляцию для обраться с -->
        <classpath>
            <pathelement location="${GWT-TEST-UTILS_LIB}"/>
            <pathelement location="${OJDBC6_LIB}"/>
        </classpath>        
    </javac>
    <copy file="src/java/log4j.properties" todir="build-test" />
  </target>
  
  <target name="test" depends="test-services,test-dao,test-unit,test-by-selenium,test-gwt">
    <echo message="test" />
  </target>

  <target name="test-service-compile" depends="check-dependencies">
    <mkdir dir="build-test" />
    <javac srcdir="${test.src.dir}"
           destdir="build-test"
           includes="com/technology/jep/**/service/*Test.java"
           debug="on"
           encoding="utf-8"
           includeantruntime="false"
           verbose="${full-compile}">
        <classpath refid="libs" />
        <classpath>
            <pathelement location="${GWT-TEST-UTILS_LIB}"/>
        </classpath>        
    </javac>
    <copy file="src/java/log4j.properties" todir="build-test" />
  </target>
  
  <target name="test-services" depends="test-service-compile">
  	<java dir ="." fork="true" maxmemory="1024m" classname="org.junit.runner.JUnitCore">
  		<arg value="com.technology.jep.jepriashowcase.feature.server.service.FeatureServiceTest" />
  		<classpath>
  			<pathelement location="src/java" />
  			<pathelement location="${test.conf.dir}" />
  			<pathelement location="build-test" />
  			<pathelement location="${JUNIT_LIB}" />
  			<pathelement location="${HAMCREST-CORE_LIB}" />
  			<pathelement location="${GWT-TEST-UTILS_LIB}" />
  			<pathelement location="${SLF4J-API_LIB}" />
  			<pathelement location="${SLF4J-SIMPLE_LIB}" />
  			<pathelement location="${JAVASSIST_LIB}" />
  			<pathelement location="${GWT-DEV_LIB}" />
  			<pathelement location="${GWT-USER_LIB}" />
  			<pathelement location="${JEPRIA_LIB}" />
  			<pathelement location="${JEPRIA-TEST_LIB}" />
  			<pathelement location="${GWT-LOG_LIB}" />
  			<pathelement location="${GWT-THEME_LIB}" />
  			<pathelement location="${SPRING-MOCK_LIB}" />
  			<pathelement location="${SPRING-CORE_LIB}" />
  			<pathelement location="${OJDBC6_LIB}" />
  			<pathelement location="${TOMCAT-CATALINA_LIB}" />
  			<pathelement location="${TOMCAT-JULI_LIB}" />
  			<pathelement location="${LOG4J_LIB}" />
  		</classpath>
  	</java>	
  </target>

  <target name="test-dao-compile" depends="check-dependencies">
    <mkdir dir="build-test" />
    <javac srcdir="${test.src.dir}"
           destdir="build-test"
           includes="com/technology/jep/**/server/dao/*DaoTest.java"
           debug="on"
           encoding="utf-8"
           includeantruntime="false"
           verbose="${full-compile}">
        <classpath refid="libs" />
    </javac>
    <copy file="src/java/log4j.properties" todir="build-test" />
  </target>
  
  <target name="test-dao" depends="test-dao-compile">
    <java dir ="." fork="true" classname="org.junit.runner.JUnitCore">
      <arg value="com.technology.jep.jepriashowcase.feature.server.dao.FeatureDaoTest" />
      <classpath>
        <pathelement location="src/java" />
        <pathelement location="build-test" />
        <pathelement location="${GWT-USER_LIB}" />
        <pathelement location="${JEPRIA_LIB}" />
        <pathelement location="${JEPRIA-TEST_LIB}" />
        <pathelement location="${JUNIT_LIB}" />
        <pathelement location="${LOG4J_LIB}" />
        <pathelement location="${OJDBC6_LIB}" />
        <pathelement location="${TOMCAT-CATALINA_LIB}" />
        <pathelement location="${TOMCAT-JULI_LIB}" />
      </classpath>
    </java> 
  </target>
  
  <target name="test-by-selenium" depends="testng-compile">
    <taskdef classname="org.testng.TestNGAntTask" name="testng">
      <classpath>
        <pathelement location="${TESTNG_LIB}" />
      </classpath>
    </taskdef>

    <propertyselector property="suites" match="testSuite(.*)" select="\1"/>
    <for list="${suites}" param="suiteId">
      <sequential>
        <testng classpathref="run-testng-libs"
            outputDir="${testng.report.dir}"
            haltOnFailure="true"
            verbose="2"
            delegateCommandSystemProperties="true"
            listeners="com.technology.jep.test.util.ScreenshotMaker">
          <classpath location="${test.src.dir}" />
          <classpath location="${JEPRIA-TEST_LIB}" />
          <classpath refid="selenium-libs" />

          <sysproperty key="browserName" value="${browserName}"/>
          <sysproperty key="browserPath" value="${browserPath}"/>
          <sysproperty key="driverPath" value="${driverPath}"/>
          <sysproperty key="jepriaVersion" value="${jepriaVersion}"/>
          <sysproperty key="host" value="${host}"/>
          <sysproperty key="appName" value="${appName}"/>
          <sysproperty key="baseUrl" value="http://${host}/${appName}"/>
          
          <sysproperty key="testUsername" value="${testUsername@{suiteId}}"/>
          <sysproperty key="testPassword" value="${testPassword@{suiteId}}"/>
        
          <sysproperty key="testDbUrl" value="${testDbUrl@{suiteId}}"/>
          <sysproperty key="testDbUser" value="${testDbUser@{suiteId}}"/>
          <sysproperty key="testDbPassword" value="${testDbPassword@{suiteId}}"/>
          
          <xmlfileset dir="${test.conf.dir}" includes="${testSuite@{suiteId}}"/>
          <!-- Вывод результатов теста в консоль. -->
          <reporter classname="com.technology.jep.test.reporter.CustomReporter"/>
        </testng>
      </sequential>
    </for>
    
  </target>

  <target name="test-unit-compile" depends="check-dependencies">
    <mkdir dir="build-test/test-unit" />
    <javac srcdir="src/java;test/test-unit/java"
           destdir="build-test/test-unit"
           includes="**/*Test.java"
           debug="on"
           encoding="utf-8"
           includeantruntime="false"
           verbose="${full-compile}">
      <classpath refid="libs" />
      <classpath>
      	<pathelement location="src/java"/>
        <pathelement location="${MOCKITO-CORE_LIB}"/>
    	</classpath>
    </javac>
  </target>
	
  <target name="test-unit" depends="test-unit-compile">
    <junit fork="yes" printsummary="yes">
      <classpath>
      	<pathelement location="${JUNIT_LIB}"/>
      	<pathelement location="${JEPRIA_LIB}"/>
        <pathelement location="${MOCKITO-CORE_LIB}"/>
        <pathelement location="${OBJENESIS_LIB}"/>
      	<pathelement location="${GWT-USER_LIB}"/>
        <pathelement location="build-test/test-unit" />
      </classpath>
      <formatter type="plain" usefile="false" />
      <batchtest>
        <fileset dir="build-test/test-unit" includes="**/*Test.class" />
      </batchtest>
    </junit>
  </target>

  <!-- Gwt-компиляция -->
  <!-- Делается сразу для всех клиентских модулей  -->
  <target name="all-gwt-compile" depends="all-text-encode, java-compile">
    <outofdate>
      <sourcefiles>
        <fileset dir="src/java" includes="**/${MODULE_NAME_IN_PACKAGE}/**/client/**/*.java" />
        <fileset dir="src/java" includes="**/${MODULE_NAME_IN_PACKAGE}/**/shared/**/*.java" />
        <fileset dir="src/java" includes="**/${MODULE_NAME_IN_PACKAGE}/**/*.gwt.xml" />
        <fileset file="${JEPRIA_LIB}" />
      </sourcefiles>
      <!-- В GWT 2.7.0 при компиляции файлу Application.nocache.js выставляется дата изменения,
      совпадающая с датой Application.gwt.xml. Подробнее: https://gwt-review.googlesource.com/#/c/10520/
      До исправления данного бага используем для сравнения файл Application.devmode.js, т.к.
      его дата изменения выставляется корректно. -->
      <!-- <targetfiles path="build-gwt/${MODULE_NAME}/${MODULE_NAME}.nocache.js" /> -->
      <targetfiles path="build-gwt/${MODULE_NAME}/${MODULE_NAME}.devmode.js" />
      <sequential>
        <delete includeemptydirs="true" quiet="true">
          <fileset dir="build-gwt" />
        </delete>
        <if>
          <equals arg1="${BUILD_CONFIG}" arg2="debug" />
          <then>
            <echo message="DEBUG" />
            <java classname="com.google.gwt.dev.Compiler" failonerror="true" fork="true" maxmemory="1024M">
              <classpath>
                <pathelement location="src/java" />
                <pathelement location="build" />
                <path refid="libs" />
              </classpath>
              <arg value="-localWorkers" />
              <arg value="${cores.count}" />
              <arg value="-war" />
              <arg value="build-gwt" />
              <arg value="-deploy" />
              <arg value="build-gwt" />
              <arg value="com.technology.${PROJECT_NAME_IN_PACKAGE}.${MODULE_NAME_IN_PACKAGE}.main.${MODULE_NAME}" />
              <arg value="-draftCompile" />
              <!-- <arg value="-logLevel" /> -->
              <!-- <arg value="TRACE" /> -->
              <!-- <arg value="-compileReport" /> -->
              <arg value="-style" />
              <arg value="detailed" />
            </java>
          </then>
          <else>
            <java classname="com.google.gwt.dev.Compiler" failonerror="true" fork="true" maxmemory="512M">
              <classpath>
                <pathelement location="src/java" />
                <pathelement location="build" />
                <path refid="libs" />
              </classpath>
              <arg value="-localWorkers" />
              <arg value="${cores.count}" />
              <arg value="-war" />
              <arg value="build-gwt" />
              <arg value="com.technology.${PROJECT_NAME_IN_PACKAGE}.${MODULE_NAME_IN_PACKAGE}.main.${MODULE_NAME}" />
              <arg value="-compileReport" />
              <arg value="-style" />
              <arg value="obfuscated" />
            </java>
          </else>
        </if>
      </sequential>
    </outofdate>
  </target>

  <target name="check-report-exists" unless="file.exists">
    <available file="${RESOURCE_HOME}/report" property="file.exists" />
  </target>

  <target name="jasper-reports-compile" depends="check-report-exists, start-log" if="${file.exists}">
    <outofdate>
      <sourcefiles>
        <fileset dir="${RESOURCE_HOME}/report" includes="**/*.jrxml" />
      </sourcefiles>
      <mapper from="*.jrxml" to="*.jasper" type="glob" />
      <sequential>
        <java classname="com.technology.jep.jrcompiler.JRCompiler" fork="true" jvm="${JAVA_HOME}/jdk/bin/java">
          <classpath>
            <path location="${GROOVY-ALL_LIB}" />
            <path location="${GWT-SERVLET_LIB}" />
            <path location="${JEPRIA_LIB}" />
            <path location="${JEPRIA-REPORT_LIB}" />
            <path location="${JFREECHART_LIB}" />
            <path location="${JRCOMPILER_LIB}" />
            <path location="${SPRING-BEANS_LIB}" />
            <path location="${SPRING-CORE_LIB}" />
          </classpath>
          <arg value="${RESOURCE_HOME}/report" />
        </java>
      </sequential>
    </outofdate>
  </target>

  <target name="web-jar" depends="encode-and-compile">
    <outofdate>
      <sourcefiles>
        <fileset refid="class-web-jar" />
        <fileset refid="properties-web-jar" />
      </sourcefiles>
      <targetfiles path="${JAR_TEMP}/${MODULE_NAME_IN_PACKAGE}-web.jar" />
      <sequential>
        <jar destfile="${JAR_TEMP}/${MODULE_NAME_IN_PACKAGE}-web.jar">
          <fileset refid="class-web-jar" />
          <fileset refid="properties-web-jar" />
        </jar>
      </sequential>
    </outofdate>
  </target>
  
  <!-- Создание приложения war -->
  <target name="war" depends="web-jar">
    <outofdate>
      <sourcefiles>
        <fileset file="${JAR_TEMP}/${MODULE_NAME_IN_PACKAGE}-web.jar" />
        <fileset file="src/html/*.gif" />
        <fileset file="src/html/*.css" />
        <fileset file="src/html/*.jsp" />
        <fileset file="src/resources/${MODULE_PACKAGE}/web/web.xml" />
        <fileset file="build-gwt/${MODULE_NAME}/*.*" />
      </sourcefiles>
      <targetfiles path="${JAR_TEMP}/${MODULE_NAME_IN_PACKAGE}.war" />
      
      <sequential>
        <unzip src="${JEPRIA-RESOURCES_LIB}" dest="temp-jepria-resources"/>
        <mkdir dir="temp-war" />
        
        <copy todir="temp-war/WEB-INF/lib">
          <fileset file="${COMMONS-BEANUTILS_LIB}" />
          <fileset file="${COMMONS-COLLECTIONS_LIB}" />
          <fileset file="${COMMONS-DIGESTER_LIB}" />
          <fileset file="${COMMONS-FILEUPLOAD_LIB}" />
          <fileset file="${COMMONS-IO_LIB}" />
          <fileset file="${COMMONS-LOGGING_LIB}" />
          <fileset file="${COMMONS-LANG_LIB}" />
          <fileset file="${COMMONS-VALIDATOR_LIB}" />
          <fileset file="${GROOVY-ALL_LIB}" />
          <fileset file="${GWT-LOG_LIB}" />
          <fileset file="${GWT-SERVLET_LIB}" />
          <fileset file="${ITEXT_LIB}" />
          <fileset file="${JAR_TEMP}/${MODULE_NAME_IN_PACKAGE}-web.jar" />
          <fileset file="${JASPERREPORTS_LIB}" />
          <fileset file="${JCOMMON_LIB}" />
          <fileset file="${JEPRIA_LIB}" />
          <fileset file="${JEPRIA-REPORT_LIB}" />
          <fileset file="${JFREECHART_LIB}" />
          <fileset file="${JSTL_LIB}" />
          <fileset file="${LOG4J_LIB}" />
          <fileset file="${SPRING-BEANS_LIB}" />
          <fileset file="${SPRING-CORE_LIB}" />
          <fileset file="${STANDARD_LIB}" />
        </copy>
        
        <copy file="${JSTL_TLD_LIB_DEF}" todir="temp-war/WEB-INF/tld" />
        
        <copy file="temp-jepria-resources/html/JepRia.css" todir="temp-war/css" />
        <copy failonerror="false" todir="temp-war/images">
          <fileset dir="temp-jepria-resources/resources/com/technology/jep/jepria/images" />
          <fileset dir="${RESOURCE_HOME}/images" />
        </copy>
        <copy todir="temp-war/css">
          <fileset file="src/html/*.css" />
        </copy>
        <copy todir="temp-war/WEB-INF/security">
          <fileset file="temp-jepria-resources/html/security/**/" />
        </copy>
        <copy todir="temp-war">
          <fileset file="src/html/*.jsp" />
        </copy>
        
        <copy file="src/resources/${MODULE_PACKAGE}/web/web.xml" todir="temp-war/WEB-INF" />
      	<copy file="src/resources/${MODULE_PACKAGE}/tomcat/context.xml" todir="temp-war/META-INF" />

      	<copy todir="temp-war">
          <fileset dir="build-gwt" />
        </copy>
        <copy failonerror="false" todir="temp-war/resources/${MODULE_PACKAGE}/report">
          <fileset dir="${RESOURCE_HOME}/report" />
        </copy>
        <copy todir="temp-war/security/javascript">
          <fileset file="${JQUERY_JSLIB}" />
          <fileset file="${JQUERY-COOKIE_JSLIB}" />
        </copy>
        <antcall target="prevent-cache-css">
          <param name="jspDir" value="temp-war"/>
        </antcall>
        <antcall target="test-build-message-check">
          <param name="jspDir" value="temp-war"/>
        </antcall>
        <jar basedir="temp-war" destfile="${DISTR_DIR}/${DISTR_NAME}.war" />
        <delete failonerror="false" dir="temp-war" />
        <delete dir="temp-jepria-resources" />
      </sequential>
    </outofdate>
  </target>
  
  <!-- Скрывает build-сообщения, если production сборка. -->
  <target name="test-build-message-check" if="${productionBuildCheck}">
    <echo message="Build is production. Hiding test build message." />
    <taskdef classpathref="jepria-toolkit-libs" classname="com.technology.jep.jepriatoolkit.check.TestBuildMessageChecker" name="testbuildmessagechecker"/>
    <testbuildmessagechecker jspDir="${jspDir}"/>
  </target>
  
  <target name="prevent-cache-css">
    <replaceregexp 
      match="\&lt;link\s+type=&quot;text/css&quot;\s+rel=&quot;stylesheet&quot;\s+(property=[&quot;']+stylesheet[&quot;']+\s+)*href=&quot;(.*?)&quot;[\s/]*\&gt;" 
      replace="\&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; \1href=&quot;\2\?${timestamp}&quot; /\&gt;" 
      flags="gis" 
      byline="true"
      encoding="UTF-8"
    >
      <fileset dir="${jspDir}" includes="*.jsp"/>
    </replaceregexp>
  </target>

  <target name="war-and-tomcat.deploy" depends="war, release-doc">
    <!-- Во время разработки не нужно сохранять в базу информацию об установке. -->
    <!-- Для теста установки модуля СОВМЕСТНО С СОХРАНЕНИЕМ, необходимо использовать цель tomcat.deploy --> 
    <antcall target="tomcat.deploy">
      <param name="SKIP_SAVE_INSTALL_INFO" value="1" />
    </antcall>
  </target>

  <target name="svn-version">
    <exec executable="svnversion" outputproperty="svnVersionRaw" resolveexecutable="true" failonerror="false" failifexecutionfails="false" />
    <propertyregex defaultvalue="" input="${svnVersionRaw}" override="true" property="svnVersionInfo" regexp="^(\d+\D*:?\d+\D*)$" select="\1" />
    <echo message="${svnVersionInfo}" />
  </target>

  <target name="svn-info">
    <exec executable="svn" outputproperty="svnPathRaw" resolveexecutable="true" failonerror="false" failifexecutionfails="false">
      <arg value="info" />
      <arg value="--xml" />
    </exec>
  
    <script language="javascript">
      <![CDATA[
        //используем javascript, так как в propertyregex нельзя использовать символ <
        var svnPath = project.getProperty("svnPathRaw").match("url\>([^<]*)<\/url");
        if(svnPath != null) {
          svnPath = svnPath[1];
        } else {
          svnPath = "Can't detect svn info.";
        }
        project.setProperty("svnPath", svnPath);
      ]]>
    </script>
    
    <echo message="${svnPath}" />
  </target>

  <target name="save-version-application" depends="svn-version, svn-info, define-toolkit-appinstall">
    <if>
      <isset property="SKIP_SAVE_INSTALL_INFO" />
      <then>
        <echo message="Skipping...." />
      </then>
      <else>
        <dirname file="." property="pdir" />
        <basename file="${pdir}" property="VERSION" />

        <startAppInstall appInstallResultId="appInstallResultId" deploymentPath="${DEPLOYMENT_PATH}" loadOperatorId="${LOAD_OPERATORID}" port="${PORT}" svnPath="${svnPath}" svnVersionInfo="${svnVersionInfo}" version="${VERSION}" />
        <!--
        <echo message="${startAppInstallResult}" />
        <echo message="${appInstallResultId}" />
        -->
      </else>
    </if>
  </target>

  <target name="finish-save-version-application" depends="define-toolkit-appinstall" unless="SKIP_SAVE_INSTALL_INFO">
    <finishAppInstall deploymentPath="${DEPLOYMENT_PATH}" port="${PORT}" loadOperatorId="${LOAD_OPERATORID}" appInstallResultId="${appInstallResultId}" StatusCode="${StatusCode}" errorMessage="${errorMessage}" />
  </target>

  
  <target name="define-tomcat">
    <taskdef name="tomcat.deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="tomcat-libs" />
    <taskdef name="tomcat.undeploy" classname="org.apache.catalina.ant.UndeployTask" classpathref="tomcat-libs" />
  </target>
  
  <target name="tomcat.undeploy" description="Undeploy from Tomcat" depends="start-log, include-deploy-properties, define-tomcat">
    <tomcat.undeploy 
      failonerror="no"
      url="${DEPLOYMENT_PATH}"
      username="${LOGIN}"
      password="${PASSWORD}"
      path="${CONTEXT_PATH}"
    />
  </target>

  <target name="tomcat.deploy" description="Deploy to Tomcat" depends="start-log, include-deploy-properties, save-version-application, tomcat.undeploy, define-tomcat">
    <echo message="Deploying ${DISTR_DIR}/${DISTR_NAME}.war to:${DEPLOYMENT_PATH}"/>
    <echo message="Deploy to Tomcat..." />
    <echo message="LOGIN: ${LOGIN}" />
  
    <trycatch property="errorMessage">
      <try>
        <tomcat.deploy 
          url="${DEPLOYMENT_PATH}"
          username="${LOGIN}"
          password="${PASSWORD}"
          path="${CONTEXT_PATH}"
          war="file:${DISTR_DIR}/${DISTR_NAME}.war"
          update="true" />
          
        <property name="StatusCode" value="0" />
        <property name="errorMessage" value="" />
      </try>
      <catch>
        <property name="StatusCode" value="1" />
        <fail message="[ERROR]: ${errorMessage}" />
      </catch>
      <finally>
        <antcall target="finish-save-version-application" />
      </finally>
    </trycatch>
    
  </target>

  <target name="doc" depends="start-log">
    <javadoc Doctitle="${MODULE_NAME} API Reference" Windowtitle="${MODULE_NAME} JavaDoc" access="private" additionalparam="-notimestamp -Xdoclint:none" charset="UTF-8" destdir="${JAVA_DOC_DIR}" docencoding="UTF-8" encoding="UTF-8" includenosourcepackages="true" overview="src/java/${MODULE_PACKAGE}/overview.html" packagenames="*" sourcepath="src/java">
      <classpath refid="libs" />
    </javadoc>
  </target>

  <target name="release-doc" depends="production-builder-check" if="${productionBuildCheck}">
    <antcall target="doc" />
  </target>

  <target name="doc-with-test" depends="java-compile">
    <javadoc Doctitle="${MODULE_NAME} API Reference (with test)" Windowtitle="${MODULE_NAME} JavaDoc (with test)" access="private" additionalparam="-notimestamp -Xdoclint:none" charset="UTF-8" destdir="${JAVA_DOC_DIR}" docencoding="UTF-8" encoding="UTF-8" includenosourcepackages="true" overview="src/java/${MODULE_PACKAGE}/overview.html" packagenames="*" sourcepath="src/java;test-gwt/java;auto;test/java">
      <classpath refid="libs" />
      <classpath refid="selenium-libs" />
    </javadoc>
  </target>

  <target name="client-module-clean">
    <echo>client.module.name = ${client.module.name}</echo>
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="src/java/${MODULE_PACKAGE}/${client.module.package.name}/shared/text" includes="**/${client.module.name}.target_properties" />
    </delete>
  </target>

  <target name="clean" depends="start-log">
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="build" />
      <fileset dir="build-gwt" />
      <fileset dir="${JAR_TEMP}" />
      <fileset dir="build-test" />
      <fileset dir="build-lib" />
      <fileset dir="temp-war" />
      <fileset dir="temp-jepria-resources" />
    </delete>
    
    <antcall target="for-each-client-module">
      <param name="action" value="client-module-clean" />
    </antcall>
  </target>
  
  <target name="clean-all" depends="clean">
    <delete file="${DISTR_DIR}/${DISTR_NAME}.war"/>
  </target>

  <target name="include-deploy-properties">
    <property file="deploy.properties"/>
  </target>

  <!-- Применение произвольной конфигурации сборки -->
  <target name="build-config" depends="start-log">
    
    <taskdef name="buildconfigswitcher" classname="com.technology.jep.jepriatoolkit.switcher.BuildConfigSwitcher" classpathref="jepria-toolkit-libs" />
    <buildconfigswitcher moduleName="${MODULE_NAME}" packageName="${PROJECT_NAME_IN_PACKAGE}" targetConfig="${BUILD_CONFIG}" />
    
    <!-- Подключаем deploy.properties после применения конфигурации, иначе будут старые значения. -->
    <antcall target="include-deploy-properties" />
  </target>
</project>
