create or replace type body dsn_data_sync_source_t is
/* db object type body: dsn_data_sync_source_t::body */



/* group: Функции */



/* group: Защищенные объявления */

/* proc: initialize
  Инициализирует экземпляр объекта.
  Процедура должна в обязательном порядке вызываться при создании экземпляра
  производного класса.

  Параметры:
  moduleSvnRoot               - путь к корневому каталогу модуля в Subversion
                                ( начиная с имени репозитария, например:
                                "Oracle/Module/ModuleInfo")
  viewList                    - список представлений, используемых для
                                обновления ( указывается имя представления без
                                учета регистра)
  mlogList                    - список логов материализованных представлений
                                ( формат см. <mlogList>)
                                ( по умолчанию отсутствует)
*/
member procedure initialize(
  moduleSvnRoot varchar2
  , viewList cmn_string_table_t
  , mlogList cmn_string_table_t := null
)
is
begin
  self.moduleSvnRoot    := moduleSvnRoot;
  self.viewList         := viewList;
  self.mlogList         := mlogList;
exception when others then
  raise_application_error(
    pkg_Error.ErrorStackInfo
    , 'Ошибка при инициализации экземпляра объекта.'
    , true
  );
end initialize;



/* group: Открытые объявления */

/* proc: createMLog
  Создает необходимые логи материализованных представлений.

  Параметры:
  forTableName                - создавать лог только для указанной таблицы
                                ( имя таблицы без учета регистра)
                                ( по умолчанию без ограничений)
  recreateFlag                - флаг пересоздания лога, если он существует
                                ( 1 да, 0 нет ( по умолчанию))
  grantPrivsFlag              - флаг выдачи пользователям, имеющим права на
                                исходное представление, в котором используется
                                таблица лога, прав на лог в случае его создания
                                ( 1 да, 0 нет ( по умолчанию))
*/
member procedure createMLog(
  self in dsn_data_sync_source_t
  , forTableName varchar2 := null
  , recreateFlag integer := null
  , grantPrivsFlag integer := null
)
is
begin
  pkg_DataSync.createMLog(
    mlogList            => mlogList
    , viewList          => viewList
    , moduleSvnRoot     => moduleSvnRoot
    , forTableName      => forTableName
    , recreateFlag      => recreateFlag
    , grantPrivsFlag    => grantPrivsFlag
  );
end createMLog;

/* proc: dropMLog
  Удаляет использовавшиеся логи материализованных представлений.

  Параметры:
  forTableName                - удалять лог только для указанной таблицы
                                ( имя таблицы без учета регистра)
                                ( по умолчанию без ограничений)
  forceFlag                   - флаг удаления лога даже если он возможно не
                                создавался в рамках модуля
                                ( 1 да, 0 нет ( по умолчанию))
  continueAfterErrorFlag      - продолжать обработку остальных логов в случае
                                ошибки при удалении лога материализованного
                                представления
                                ( 1 да, 0 нет ( по умолчанию))

  Замечания:
  - если лог для удаления отсутствует, то удаление не выполняется и процедура
    завершается без ошибок;
*/
member procedure dropMLog(
  self in dsn_data_sync_source_t
  , forTableName varchar2 := null
  , forceFlag integer := null
  , continueAfterErrorFlag integer := null
)
is
begin
  pkg_DataSync.dropMLog(
    mlogList                  => mlogList
    , moduleSvnRoot           => moduleSvnRoot
    , forTableName            => forTableName
    , forceFlag               => forceFlag
    , continueAfterErrorFlag  => continueAfterErrorFlag
  );
end dropMLog;

/* proc: grantPrivs
  Выдает права для основного пользователя, под которым будут создаваться
  интерфейсные объекты.

  Параметры:
  userName                    - имя пользователя, которому выдаются права
  forObjectName               - ограничить выдачу прав только указанным
                                представлением либо исходной таблицей
                                и связанным с ней логом
                                ( имя объекта без учета регистра)
                                ( по умолчанию без ограничений)
*/
member procedure grantPrivs(
  self in dsn_data_sync_source_t
  , userName varchar2
  , forObjectName varchar2 := null
)
is
begin
  pkg_DataSync.grantPrivs(
    viewList            => viewList
    , mlogList          => mlogList
    , userName          => userName
    , forObjectName     => forObjectName
  );
end grantPrivs;

end;
/
