create or replace package pkg_DataSync
authid current_user
is
/* package: pkg_DataSync
  Функции репликации данных, предназначенные для использования в прикладных
  модулях.

  Пакет выполняется с правами вызывающего ( authid current_user).

  SVN root: Oracle/Module/DataSync
*/



/* group: Константы */

/* const: Module_Name
  Название модуля, к которому относится пакет.
*/
Module_Name constant varchar2(30) := 'DataSync';



/* group: Методы обновления */

/* const: Compare_RefreshMethodCode
  Код метода обновления таблицы с помощью сравнения данных.
*/
Compare_RefreshMethodCode constant varchar2(1) := 'd';

/* const: CompareTemp_RefreshMethodCode
  Код метода обновления таблицы с помощью сравнения данных с использованием
  временной таблицы.
*/
CompareTemp_RefreshMethodCode constant varchar2(1) := 't';

/* const: MView_RefreshMethodCode
  Код метода обновления таблицы с помощью материализованного представления.
*/
MView_RefreshMethodCode constant varchar2(1) := 'm';



/* group: Функции */



/* group: Обновление с помощью сравнения */

/* pproc: refreshByCompare
  Обновляет данные таблицы с помощью сравнения содержащихся в ней и актуальных
  данных и внесения необходимых изменений командами merge и delete.

  Параметры:
  targetTable                 - таблица для обновления (имя таблицы, возможно
                                с указанием схемы и DB-линка, без учета
                                регистра)
  dataSource                  - источник актуальных данных
  tempTableName               - временная таблица для промежуточного сохранения
                                актуальных данных и использования в командах
                                merge и delete ( имя таблицы, возможно
                                с указанием схемы, без учета регистра)
                                ( по умолчанию в командах merge и delete
                                  используется источник актуальных данных)
  excludeColumnList           - список колонок таблицы, исключаемых из
                                обновления ( с разделителем запятая, без учета
                                регистра)
                                ( по умолчанию пустой, т.е. обновляются все
                                  колонки таблицы)

  Замечания:
  - у таблицы должен быть первичный ключ;
  - в dataSource может быть указано любое выражение, из которого можно
    выполнить выборку с указанием всех колонок, присутствующих в таблице для
    обновления, за исключением указанных в excludeColumnList;
  - во временной таблице должны быть все колонки, присутствующие в таблице для
    обновления, за исключением указанных в excludeColumnList;
  - в случае указания удалённой таблицы в качестве targetTable список колонок
    определяется по dataSource, а первичный ключ по targetTable в БД
    источнике;

  ( <body::refreshByCompare>)
*/
procedure refreshByCompare(
  targetTable varchar2
  , dataSource varchar2
  , tempTableName varchar2 := null
  , excludeColumnList varchar2 := null
);



/* group: Обновление с использованием первичного ключа */

/* pproc: appendData
  Догрузка данных в таблицу(ы) в удалённой БД по первичному ключу.

  Параметры:
  targetDbLink                - линк к БД назначения
  tableName                   - таблица для догрузки
  idTableName                 - наименование исходной таблицы для поиска
                                значений первичного ключа (по-умолчанию
                                tableName)
  addonTableName              - дополнительная таблица для догрузки
  addonSourceTableName        - исходная дополнительная таблица для догрузки
  sourceTableName             - таблица(представление) с исходными данными
                                (по-умолчанию tableName)
  toDate                      - дата, до которой доливаются данные
                                ( date_ins < toDate, по умолчанию до начала
                                  предыдущего часа)
  maxExecTime                 - максимальное время выполнения процедуры ( в
                                случае, если время превышено и остались данные
                                для обработки, процедура завершает работу
                                с выводом предпреждения в лог, по умолчанию
                                без ограничений)

  Возврат:
  - число добавленных записей;

  Замечания:
  - функция выполняется в автономной транзакции и делает commit после выгрузки
    существенного числа записей;

  ( <body::appendData>)
*/
function appendData(
  targetDbLink                varchar2
, tableName                   varchar2
, idTableName                 varchar2 := null
, addonTableName              varchar2 := null
, addonSourceTableName        varchar2 := null
, sourceTableName             varchar2 := null
, toDate                      date := null
, maxExecTime                 interval day to second := null
)
return integer;



/* group: Обновление с помощью материализованного представления */

/* pproc: createMLog
  Создает необходимые логи материализованных представлений.

  Параметры:
  mlogList                    - список логов м-представлений в формате
                                <tableName>[:<createOption>], где tableName
                                имя базовой таблицы ( без учета регистра),
                                createOption опции для создания лога
                                ( пример: "tmp_table:with rowid")
  viewList                    - список представлений, используемых для
                                обновления ( указывается имя представления без
                                учета регистра)
                                ( необходимо указывать только в случае
                                  grantPrivsFlag равного 1, чтобы определить
                                  пользователей, которым нужно выдать права,
                                  по умолчанию отсутствует)
  moduleSvnRoot               - путь к корневому каталогу модуля в Subversion
                                ( начиная с имени репозитария, например:
                                "Oracle/Module/ModuleInfo"). Если указан, то
                                в комментарий к таблице, содержащей лог,
                                добавляется строка
                                " [ SVN root: <moduleSvnRoot>]"
                                ( по умолчанию отсутствует)
  forTableName                - создавать лог только для указанной таблицы
                                из списка
                                ( по умолчанию без ограничений)
  recreateFlag                - флаг пересоздания лога, если он существует
                                ( 1 да, 0 нет ( по умолчанию))
  grantPrivsFlag              - флаг выдачи пользователям, имеющим права на
                                исходное представление, в котором используется
                                таблица лога, прав на лог в случае его создания
                                ( 1 да, 0 нет ( по умолчанию))

  ( <body::createMLog>)
*/
procedure createMLog(
  mlogList cmn_string_table_t
  , viewList cmn_string_table_t := null
  , moduleSvnRoot varchar2 := null
  , forTableName varchar2 := null
  , recreateFlag integer := null
  , grantPrivsFlag integer := null
);

/* pproc: dropMLog
  Удаляет использовавшиеся логи материализованных представлений.

  Параметры:
  mlogList                    - список логов м-представлений в формате
                                <tableName>[:<createOption>], где tableName
                                имя базовой таблицы ( без учета регистра),
                                createOption опции для создания лога ( не
                                используются)
  moduleSvnRoot               - путь к корневому каталогу модуля в Subversion
                                ( начиная с имени репозитария, например:
                                "Oracle/Module/ModuleInfo"). Если указан, то
                                по комментарию к таблице, содержащей лог,
                                определяется, был ли лог создан в рамках модуля
                                ( по умолчанию отсутствует)
  forTableName                - удалять лог только для указанной таблицы
                                из списка
                                ( по умолчанию без ограничений)
  forceFlag                   - флаг удаления лога даже если он возможно не
                                создавался в рамках модуля
                                ( 1 да, 0 нет ( по умолчанию))
  continueAfterErrorFlag      - продолжать обработку остальных логов в случае
                                ошибки при удалении лога материализованного
                                представления
                                ( 1 да, 0 нет ( по умолчанию))

  Замечания:
  - если лог для удаления отсутствует, то удаление не выполняется и процедура
    завершается без ошибок;

  ( <body::dropMLog>)
*/
procedure dropMLog(
  mlogList cmn_string_table_t
  , moduleSvnRoot varchar2 := null
  , forTableName varchar2 := null
  , forceFlag integer := null
  , continueAfterErrorFlag integer := null
);

/* pproc: grantPrivs
  Выдает права для основного пользователя, под которым будут создаваться
  интерфейсные объекты.

  Параметры:
  viewList                    - список представлений, используемых для
                                обновления ( указывается имя представления без
                                учета регистра)
  userName                    - имя пользователя, которому выдаются права
  mlogList                    - список логов м-представлений в формате
                                <tableName>[:<createOption>], где tableName
                                имя базовой таблицы ( без учета регистра),
                                createOption опции для создания лога ( не
                                используются)
                                ( по умолчанию отсутствуют)
  forObjectName               - ограничить выдачу прав только указанным
                                представлением либо исходной таблицей
                                и связанным с ней логом
                                ( имя объекта без учета регистра)
                                ( по умолчанию без ограничений)

  ( <body::grantPrivs>)
*/
procedure grantPrivs(
  viewList cmn_string_table_t
  , userName varchar2
  , mlogList cmn_string_table_t := null
  , forObjectName varchar2 := null
);

/* pproc: dropMViewPreserveTable
  Удаляет материализованное представление с сохранением одноименной таблицы
  с данными.

  Параметры:
  tableName                   - имя таблицы ( м-представления)

  ( <body::dropMViewPreserveTable>)
*/
procedure dropMViewPreserveTable(
  tableName varchar2
);

/* pproc: refreshByMView
  Обновляет данные интерфейсной таблицы с помощью fast-обновляемого
  материализованного представления.

  Параметры:
  tableName                   - имя таблицы ( м-представления) текущего
                                пользователя
  sourceView                  - имя представления с исходными данными, возможно
                                с указанием схемы
                                ( без учета регистра, используется в случае
                                  создания м-представления)
                                ( по умолчанию отсутствует)
  excludeColumnList           - список колонок таблицы, исключаемых из
                                обновления ( с разделителем запятая, без учета
                                регистра)
                                ( по умолчанию пустой, т.е. обновляются все
                                  колонки таблицы)
  allowDropMViewList          - список материализованных представлений текущего
                                пользователя, которые могут быть удалены, если
                                они зависят от обновляемой итерфейсной таблицы
                                ( для исключения ошибки "ORA-32334: cannot
                                  create prebuilt materialized view on a table
                                  already referenced by a MV" при создании
                                  материализованного представления)
                                ( без учета регистра, по умолчанию список
                                  пустой и удаление не выполняется)
  createMViewFlag             - создавать материализованное представление для
                                обновления таблицы, если оно отсутствует либо
                                его невозможно использовать для обновления
                                ( 1 да, 0 нет ( по умолчанию), игнорируется в
                                  в случае указания forceCreateMViewFlag равным
                                  1)
  forceCreateMViewFlag        - безусловно создавать ( пересоздавать)
                                материализованное представление для обновления
                                таблицы
                                ( 1 да, 0 нет ( по умолчанию))

  Если параметр createMViewFlag равен 1, то при выполнении процедуры
  материализованное представление будет:
  - создано в случае его отсутствия;
  - пересоздано в случае пересоздания логов исходных таблиц, на которых оно
    основано ( при возникновении ошибки
    "ORA-12034: materialized view log on "..." younger than last refresh"
    во время обновления либо если дата создания локального лога
    ( находящегося в той же БД, что и материализованное представление) больше
    или равна дате создания материализованного представления);

  Если параметр forceCreateMViewFlag равен 1, то при выполнении процедуры
  в любом случае будет создано новое материализованное представление.

  Замечания:
  - при обновлении таблицы выполняется commit;
  - для исключения пропуска изменений в исходных данных перед созданием
    м-представления устанавливается эксклюзивная блокировка на таблицу
    для обновления и на таблицы с исходными данными, от которых зависит
    исходное представление, и выполняется обновление данных таблицы с помощью
    сравнения данных ( см. <refreshByCompare>);

  ( <body::refreshByMView>)
*/
procedure refreshByMView(
  tableName varchar2
  , sourceView varchar2 := null
  , excludeColumnList varchar2 := null
  , allowDropMViewList cmn_string_table_t := null
  , createMViewFlag integer := null
  , forceCreateMViewFlag integer := null
);



/* group: Обновление списка таблиц */

/* pfunc: getTableConfigString
  Возвращает нормализованную строку с настройками обновления для таблицы.

  Параметры:
  srcString                   - исходная строка
                                ( элемент списка таблиц, используемого в
                                  качестве значения парамета tableList функции
                                  <refresh>)
  sourceSchema                - имя схемы по умолчанию для исходных
                                представлений
                                ( по умолчанию отсутствует)

  Возврат:
  нормализованная строка.

  Формат нормализованной
  строки:

  <tableName>:<refreshMethod>:<sourceView>:<tempTableName>:<excludeColumnList>

  ( <body::getTableConfigString>)
*/
function getTableConfigString(
  srcString varchar2
  , sourceSchema varchar2 := null
)
return varchar2;

/* pproc: refresh
  Обновляет данные в интерфейсных таблицах.

  Параметры:
  tableList                   - список таблиц для обновления ( формат см. ниже)
  sourceSchema                - имя схемы по умолчанию для исходных
                                представлений
                                ( по умолчанию отсутствует)
  forTableName                - обновление только указанной таблицы
                                ( имя таблицы без учета регистра)
                                ( по умолчанию без ограничений)
  createMViewFlag             - создавать материализованное представление для
                                обновления таблицы, если оно отсутствует либо
                                его невозможно использовать для обновления, и
                                для таблицы указан метод обновления с помощью
                                м-представления
                                ( 1 да, 0 нет ( по умолчанию), игнорируется в
                                  в случае указания forceCreateMViewFlag равным
                                  1)
  forceCreateMViewFlag        - безусловно создавать ( пересоздавать)
                                материализованное представление для обновления
                                таблицы, если для таблицы указан метод
                                обновления с помощью м-представления
                                ( 1 да, 0 нет ( по умолчанию))
  continueAfterErrorFlag      - продолжать обработку остальных таблиц в случае
                                ошибки при обновлении
                                ( 1 да, 0 нет ( по умолчанию))

  Элементы списка таблиц для обновления ( параметр tableList) указываются в формате:

  <tableName>[:[<refreshMethod>][:[<sourceView>][:[<tempTableName>]]]][:[<optionList>]]

  tableName             - имя таблицы для обновления ( без учета регистра)
                          ( в случае обновления с помощью материализованного
                          представления таблица должна принадлежать текущему
                          пользователю, иначе перед именем таблицы
                          можно указать схему)
  refreshMethod         - метод обновления ( "d" сравнением данных ( по
                          умолчанию), "m" с помощью материализованного
                          представления, "t" сравнением с использованием
                          временной таблицы)
  sourceView            - имя исходного представления, возможно с указанием
                          схемы ( без учета регистра, по умолчанию строится на
                          основе имени таблицы для обновления добавлением
                          префикса "v_", в качестве схемы по умолчанию
                          используется значение параметра sourceSchema)
  tempTableName         - имя временной таблицы ( без учета регистра),
                          используемой при обновлении методом "t" ( по
                          умолчанию строится на основе имени таблицы для
                          обновления добавлением окончания "_tmp")
  optionList            - список дополнительных опций ( с разделителем пробел)
                          в формате "<optName>=<optValue>", допустимые опции
                          перечислены ниже;

  Возможные дополнительные
  опции ( указываемые в <optionList>):

  excludeColumnList     - список колонок таблицы, исключаемых из обновления
                          ( с разделителем запятая, без учета регистра,
                           пробельные символы игнорируются) ( по умолчанию
                          в обновлении участвуют все колонки)

  Символы табуляции ( 0x09), возврата каретки ( 0x0D), перевода строки ( 0x0A)
  рассматриваются как пробельные и игнорируются, если они указаны до или после
  элементов списка.

  Замечания:
  - после обновления каждой таблицы выполняется commit;

  ( <body::refresh>)
*/
procedure refresh(
  tableList cmn_string_table_t
  , sourceSchema varchar2 := null
  , forTableName varchar2 := null
  , createMViewFlag integer := null
  , forceCreateMViewFlag integer := null
  , continueAfterErrorFlag integer := null
);

/* pproc: dropRefreshMView
  Удаляет материализованные представления, созданные для обновления
  интерфейсных таблиц.
  Удаление выполняется только в случае, если в списке таблиц для таблицы
  указан метод обновления с помощью материализованного представления
  (  таблица при удалении м-представления сохраняется).

  Параметры:
  tableList                   - список таблиц для обновления ( формат см. в
                                описании процедуры <refresh>)
  forTableName                - обработка только указанной таблицы
                                ( имя таблицы без учета регистра)
                                ( по умолчанию без ограничений)
  ignoreNotExistsFlag         - игнорировать отсутствие материализованного
                                представления для удаления
                                ( 1 игнорировать, 0 выбрасывать ошибку
                                  ( по умолчанию))
  continueAfterErrorFlag      - продолжать обработку остальных таблиц в случае
                                ошибки при удалении материализованного
                                представления
                                ( 1 да, 0 нет ( по умолчанию))

  ( <body::dropRefreshMView>)
*/
procedure dropRefreshMView(
  tableList cmn_string_table_t
  , forTableName varchar2 := null
  , ignoreNotExistsFlag integer := null
  , continueAfterErrorFlag integer := null
);

end pkg_DataSync;
/
