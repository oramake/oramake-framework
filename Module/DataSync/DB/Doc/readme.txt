title: Описание



group: Общее описание

Модуль содержит функции для репликации данных, предназначенные для
использования в прикладных модулях.

Функции модуля работают с правами вызывающего ( authid current_user).

Поддерживаемые методы обновления данных:

1. <Обновление с помощью сравнения данных>

2. <Обновление с помощью сравнения данных с использованием временной таблицы>

3. <Обновление с помощью fast-обновляемого материализованного представления>

Методы перечислены в порядке убывания приоритета ( т.е. если не подходит 1-й
метод, рассматриваем 2-й).

Для упрощения создания прикладных модулей, реализующих интерфейсные таблицы
для хранилица, реализован специальный объектный интерфейс
( см. <Интерфейсные таблицы>, <Реализация модуля интерфейсных таблиц>).



group: Обновление с помощью сравнения данных

Обновляет данные таблицы с помощью сравнения содержащихся в ней и актуальных
данных и внесения необходимых изменений командами merge и delete
( см. <pkg_DataSync.refreshByCompare>).

Ограничения по применению:

- нежелательно применять для больших выборок данных по соображениям
  производительности и нагрузки на БД ( примерная граница: обновление таблицы
  должно занимать не более 1 минуты);



group: Обновление с помощью сравнения данных с использованием временной таблицы

Является оптимизированным вариантом метода
<Обновление с помощью сравнения данных>: актуальные данные предварительно
загружаются во временную таблицу, которая затем используется в командах merge
и delete. В результате выборка актуальных данных выполняется один раз ( при
заполнении временной таблицы) вместо двух ( отдельно при выполнении команд
merge и delete). Данный метод целесообразно использовать в случае трудоемкой
выборки актуальных данных.

Ограничения по применению:

- нежелательно применять для больших выборок данных по соображениям
  производительности и нагрузки на БД ( примерная граница: обновление таблицы
  должно занимать не более 1 минуты);



group: Обновление с помощью fast-обновляемого материализованного представления

Для регулярного обновления таблицы используется fast-обновляемое
материализованное представление с опцией "on prebuilt table" на основе
таблицы, которую требуется обновлять.  Материализованное представление может
быть создано ( пересоздано) автоматически при обновлении таблицы с
использованием выборки, зафиксированной в предварительно созданном
представлении с исходными данными ( см. <pkg_DataSync.refreshByMView>).

Ограничения по применению:

- в случае сложных выборок над исходными таблицами может быть трудно ( или
  невозможно) обеспечить fast-обновление материализованного представления;

- для fast-обновления материализованного представления должны быть созданы логи
  на исходных таблицах, что может быть нежелательно из-за замедления скорости
  изменения исходных таблиц;

Замечания:

- в случае различий между типами колонок в таблице и типам колонок в исходном
  представлении при создании материализованного представления может
  возникать ошибка
  "ORA-12060: shape of prebuilt table does not match definition query".

  Для исключения различий в типах колонок, не входящих в первичный ключ, в
  исходном представлении можно использовать оператор приведения типа cast.
  Для трансляции текстовых полей из мультибайтовой кодировки в однобайтовую
  можно использовать SQL-функцию to_single_byte.
  Попытка приведения типа колонки первичного ключа вызывает ошибку
  "ORA-12016: materialized view does not include all primary key columns"
  при создании м-представления. Т.о. типы колонок первичного ключа в
  обновляемой таблице должны соответствовать фактическим типам колонок
  из исходного представления либо можно добавлять в таблицу и представление
  дополнительные колонки для колонок первичного ключа с другими названиями и
  с типом, соответствующим фактическому, а для колонок с именами колонок
  первичного ключа использовать приведение типа с помощью cast.



group: Интерфейсные таблицы

Интерфейсные таблицы содержат основные данные по какой-то прикладной системе и
используются для предоставления данных по этой системе внешним системам
( обычно создаются для последующей загрузки данных в хранилище). Внешняя
система располагается в другой БД и получает данные из интерфейсных таблиц с
помощью материализованных представлений, работающих по линку.

Требования к интерфейсным таблицам:
- обеспечение неизменности структуры данных в случае доработки прикладной
  системы ( неизменность интерфейса для внешней системы);
- исключение необоснованных ( без фактического изменения данных) массовых
  обновлений записей в интерфейсных таблицах;

Для обеспечения обновления данных в интерфейсные таблицы могут добавляться
служебные поля с префиксом "int_", которые не должны использоваться внешней
системой.

При создании интерфейсных справочников ( или использовании полей, содержащих
кодовые значения) желательно добавлять типовую запись "Остальные", к которой
должны относиться данные, не относящиеся к другим записям справочника. Это
позволит исключить необходимость изменения интерфейса в случае изменения
исходного справочника ( например, добавления в него новой записи).

В большинстве случаев для интерфейсных таблиц создается отдельный модуль,
название которого в случае интерфейсных таблиц для хранилища имеет вид
"<Имя системы>2Dwh".

Схема реализации:
- создаются интерфейсные таблицы, а также, обычно, материализованные логи на
  эти таблицы, что позволяет создавать материализованные представления
  на базе этих таблиц во врешней БД ( хранилище);
- для обновления данных в интерфейсных таблицах создаются представления
  идентичной структуры на базе исходных таблиц прикладной системы
  ( исходные представления);
- создается пакетное задание для регулярного обновления данных интерфейсных
  таблиц по данным исходных представлений ( обновление выполняется с помощью
  сравнения данных либо с помощью материализованного представления, в
  зависимости от конкретной таблицы);

В дальнейшем в случае изменений в структуре или наборе исходных таблиц
достаточно внести соответствующие изменения в исходные представления.

В случае,
если одновременно выполняются условия:

- интерфейсная таблица обновляется с помощью fast-обновляемого
  материализованного представления,
- выполняется массовое изменение записей исходной таблицы, используемой в этом
  материализованном представлении, не влияющее на данные материализованного
  представления,

то перед выполнением изменения данных исходной таблицы нужно удалить созданный
на ней лог, а после завершения изменений заново его создать. Это приведет
к пересозданию материализованного представления при обновлении интерфейсной
таблицы с предварительным обновлением данных в ней с помощью сравнения
( в случае использования параметра createMViewFlag или forceCreateMViewFlag,
см. <pkg_DataSync.refreshByMView>). Т.о. будет исключено необоснованное
массовое изменение записей в интерфейсной таблице.

  Например, нужно добавить новую колонку со значением по умолчанию в таблицу
mpr_data модуля ModName. Порядок действий:

- удаляем лог на таблице mpr_data;

(code)

drop materialized view log on mpr_data
/

(end)

- добавляем колонку в таблицу и заполняем ее;

- восстанавливаем лог на таблице mpr_data;

(code)

exec mpr_ModName_source_t().createMLog( forTableName => 'mpr_data');

(end)

Замечания:
- если интерфейсная таблица обновляется с помощью fast-обновляемого
  материализованного представления, то первичный ключ и уникальные ключи
  ( если они есть) должны быть созданы с опцией валидации при выполнении commit
  ( "deferred") для исключения ошибки
  "ORA-00001: unique constraint (...) violated"
  ( см. <Note.67424.1 at https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=67424.1> Materialized View Triggers, Constraints and Longs)



group: Реализация модуля интерфейсных таблиц

Последовательность реализации модуля:

- *создать скрипты для исходных представлений*;

  Создаются скрипты для исходных представлений
  ( DB/Install/Schema/Last/SourceSchema/v_*.vw), соответствующие
  интерфейсным таблицам. Набор и тип полей должен точно соответствовать полям
  в интерфесной таблице. В некоторых случаях для возможности обновления
  данных требуется добавить дополнительные служебные поля. Например, для
  fast-обновления материализованного представления, содержащего соединения
  таблиц, нужно ( см. "Oracle Database Data Warehousing Guide"):
  - добавить поля с rowid таблиц, участвующих в выборке ( поля "int_%_rid");
  - условия соединения указывать во фразе where ( в случае внешнего соединения
    использовать Oracle-синтаксис с "(+)");
  - на исходных таблицах создать логи с опцией "with rowid";

  Для эффективности обновления интерфейсной таблицы поля с rowid нужно
  проиндексировать.

  Для обеспечения заданного для интерфейсной таблицы типа поля может
  потребоваться явное приведение типа в интерфейсном представлении.

- *сгенерить скрипты создания интерфейсных таблиц по исходным представлениям*

  Для этого исходные представления создаются в БД, после чего
  процедурой pkg_ScriptUtility.generateInterfaceTable ( модуль ScriptUtility
  ( Oracle/Module/ScriptUtility)) выполняется генерация скриптов создания
  интерфейсных таблиц.

  После генерации в скрипты проверяются и, в случае необходимости, уточняются
  ( обычно уточняется размерность типов, обязательность заполнения, первичный
  ключ ( если это не первое поле таблицы), добавляется опция
  "initially deferred deferrable" для первичного/уникальных ключей при
  обновлении с помощью материализованного представления). Возможно также
  потребуется внести уточнения в скрипты исходных представлений.

- *сгенерить скрипты создания временных таблиц по исходным представлениям*

  Временные таблицы нужно создать для интерфейсных таблиц, обновляемых методом
  <Обновление с помощью сравнения данных с использованием временной таблицы>.

  Для этого после создания исходных представлений в БД процедурой
  pkg_ScriptUtility.generateInterfaceTempTable ( модуль ScriptUtility
  ( Oracle/Module/ScriptUtility)) выполняется генерация скриптов создания
  временных таблиц.

- *добавить объектный тип для управления объектами в исходной схеме*

  Создается тип-потомок типа <dsn_data_sync_source_t>, от которого наследуются
  методы для управления объектами, в конструкторе выполняется вызов процедуры
  инициализации <dsn_data_sync_source_t.initialize> с требуемыми значениями
  параметров.

- *добавить скрипты установки/удаления модуля в исходную схему*

- *добавить объектный тип для управления интерфейсными таблицами*

  Создается тип-потомок типа <dsn_data_sync_t>, от которого наследуются
  методы для управления объектами, в конструкторе выполняется вызов процедуры
  инициализации <dsn_data_sync_t.initialize> с требуемыми значениями
  параметров.

- *добавить скрипты установки/удаления модуля в основную схему*

- *добавить пакетное задание для обновления интерфейсных таблиц*

  Если интерфейсные таблицы не принадлежат пользователю, под которым
  выполняется пакетное задание, то нужно создать процедуру-обертку
  для процедуры обновления интерфейсных таблиц ( с правами создателя) и
  вызывать ее из пакетного задания. Также нужен скрипт для выдачи прав на
  процедуру.
