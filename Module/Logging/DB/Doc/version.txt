title: Версии



group: 2.1.0 ( 2019-02-27)

[*] Изменена выборка в представлении <v_lg_context_change_log> для исключения
    использования неэффективного плана в некоторых случаях (например, для
    выборки из скрипта DB/Show/log.sql модуля Scheduler мог использоваться
    неэффективный план запроса с INDEX FULL SCAN вместо INDEX RANGE SCAN для
    индекса lg_log_ix_context_change).



group: 2.0.0 ( 2018-05-07)

[+] Добавлена возможность логирования с указанием контекста выполнения
    (вложенного или ассоциативного).

[+] Добавлена возможность сохранения в логе дополнительного целочисленного и
    строкового значений, связанных с сообщением (поля message_value,
    message_label).

[+] В таблицу лога добавлены уникальный идентификатор сессии (поле sessionid),
    код уровня логирования (поле level_code), время формирования записи лога
    (поле log_time).

[+] В таблице лога стали сохраняться имя модуля, имя объекта и идентификатор
    модуля, добавившего запись лога (поля module_name, object_name, module_id).

[*] Перегруженные варианты функции <lg_logger_t.getLogger> объединены в один.

[*] Установка таблицы в качестве единственного назначения вывода
    (функцией <pkg_Logging.setDestination>) стала отключать вывод через
    dbms_output в тестовых БД.

[-] Удалены неиспользуемые методы setAdditivity и getAdditivity типа
    <lg_logger_t>.



group: 1.4.1 ( 2017-02-07)

[!] Исключена ошибка при попытке логирования сообщения длиной свыше 4000
    символов ( выбрасывалось исключение
    "ORA-01461: can bind a LONG value only for insert into a LONG column",
    ошибка внесена в версии 1.4.0).

[+] В тип <lg_logger_t> добавлены статические функции get%LevelCode,
    возвращающие коды уровней логирования, для исключения лишних зависимостей в
    прикладных модулях ( чтобы при использовании типа lg_logger_t не
    требовалось использовать пакет pkg_Logging).

[*] Добавление параметра isStackPreserved в <lg_logger_t.getErrorStack()>
    аналогично <pkg_Logging::getErrorStack> для исключения лишних зависимостей
    в прикладных модулях.

[*] Для кода уровня предупреждения стала использоваться константа
    <pkg_Logging.Warn_LevelCode> ( устарешая константа
    pkg_Logging.Warning_LevelCode временно сохранена для совместимости).



group: 1.4.0 ( 2016-02-10)

[*] Стала использоваться собственная таблица лога для исключения зависимости
    от модуля Scheduler ( перенесена из Scheduler с минимальными изменениями).



group: 1.3.0 ( 2014-11-25)

[-] Удалены колонки operator_id и триггеры для таблиц <lg_destination>,
    <lg_level>;

[+] Оптимизирована функция <pkg_LoggingInternal::body::logScheduler> для случая
    отсутствия регистрации оператора. Использован параметр operatorId функции
    pkg_Scheduler.writeLog.

[+] При установке версии Last, в случае если спецификации пакета pkg_Scheduler
    не существует, устанавливается временная урезанная версия для компиляции
    pkg_LoggingInternal.




group: 1.2.1 ( 2012-12-14)

[+] Добавлена возможность установки триггера "after servererror on schema" в
    пользовательские схемы, иначе при возникновении исключения на клиенте текст
    сообщения не выводится в расшифрованном виде.

[+] Удалена зависимость от модуля TaskHandler. При выводе сообщения через
    dbms_output при указании времени если прошло больше часа после вывода
    последнего сообщения время выводится в часах ( с символами "h.").



group: 1.2.0 ( 2010-10-27)

[*] Выдача прав всем пользователем
<Install/Grant/Last/all-to-public.sql> осуществляется при
установке модуля.

[*] Добавлена возможность обработки стека ошибок общей длины
до 32767 символов при работе в удалённой БД по линку
( функция <lg_logger_t.remoteErrorStack>).

[*] В функции <pkg_Logging.getErrorStack>,
<pkg_LoggingErrorStack.getErrorStack> добавлен параметр
isStackPreserved.

