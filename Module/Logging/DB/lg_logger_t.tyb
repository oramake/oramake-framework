create or replace type body lg_logger_t is
/* db object type body: lg_logger_t::body */



/* group: Функции */



/* group: Закрытые объявления */

/* func: lg_logger_t
  Создает логер.

  Параметры:
  loggerName                  - Имя логера
                                (по умолчанию формируется из moduleName и
                                objectName)
  moduleName                  - Имя модуля
                                (по умолчанию выделяется из loggerName)
  objectName                  - Имя объекта в модуле (пакета, типа, скрипта)
                                (по умолчанию выделяется из loggerName)
  findModuleString            - Строка для определения Id модуля в ModuleInfo
                                (может совпадать с одним из трех атрибутов
                                модуля: названием, путем к корневому каталогу,
                                первоначальным путем к корневому каталогу в
                                Subversion)
                                (по умолчанию используется moduleName)

  Возврат:
  - созданный объект

  Замечания:
  - функция не должна вызываться явно, более адекватно использовать функции
    getLogger;
  - вызывает функцию <pkg_LoggingInternal.getLoggerUid>;
*/
constructor function lg_logger_t(
  loggerName varchar2
  , moduleName varchar2 := null
  , objectName varchar2 := null
  , findModuleString varchar2 := null
)
return self as result
is
begin
  self.loggerUid := pkg_LoggingInternal.getLoggerUid(
    loggerName          => loggerName
    , moduleName        => moduleName
    , objectName        => objectName
    , findModuleString  => findModuleString
  );
  return;
end lg_logger_t;



/* group: Открытые объявления */



/* group: Уровни логирования */

/* func: getOffLevelCode
  Возвращает код уровня логирования "Логирование отключено".
*/
static function getOffLevelCode
return varchar2
is
begin
  return pkg_Logging.Off_LevelCode;
end getOffLevelCode;

/* func: getFatalLevelCode
  Возвращает код уровня логирования "Фатальная ошибка".
*/
static function getFatalLevelCode
return varchar2
is
begin
  return pkg_Logging.Fatal_LevelCode;
end getFatalLevelCode;

/* func: getErrorLevelCode
  Возвращает код уровня логирования "Ошибка".
*/
static function getErrorLevelCode
return varchar2
is
begin
  return pkg_Logging.Error_LevelCode;
end getErrorLevelCode;

/* func: getWarnLevelCode
  Возвращает код уровня логирования "Предупреждение".
*/
static function getWarnLevelCode
return varchar2
is
begin
  return pkg_Logging.Warn_LevelCode;
end getWarnLevelCode;

/* func: getInfoLevelCode
  Возвращает код уровня логирования "Информация".
*/
static function getInfoLevelCode
return varchar2
is
begin
  return pkg_Logging.Info_LevelCode;
end getInfoLevelCode;

/* func: getDebugLevelCode
  Возвращает код уровня логирования "Отладка".
*/
static function getDebugLevelCode
return varchar2
is
begin
  return pkg_Logging.Debug_LevelCode;
end getDebugLevelCode;

/* func: getTraceLevelCode
  Возвращает код уровня логирования "Трассировка".
*/
static function getTraceLevelCode
return varchar2
is
begin
  return pkg_Logging.Trace_LevelCode;
end getTraceLevelCode;

/* func: getAllLevelCode
  Возвращает код уровня логирования "Максимальный уровень логирования".
*/
static function getAllLevelCode
return varchar2
is
begin
  return pkg_Logging.All_LevelCode;
end getAllLevelCode;



/* group: Вспомогательные функции */

/* func: getOpenContextLogId
  Возвращает Id записи лога открытия текущего (последнего открытого)
  вложенного контекста (null при отсутствии текущего вложенного контекста).
*/
static function getOpenContextLogId
return integer
is
begin
  return pkg_LoggingInternal.getOpenContextLogId();
end getOpenContextLogId;



/* group: Получение логера */

/* func: getRootLogger
  Возвращает корневой логер.

  Возврат:
  - корневой логер
*/
static function getRootLogger
return lg_logger_t
is
begin
  return lg_logger_t( loggerName => null);
end getRootLogger;

/* func: getLoggerName
  Возвращает имя логера по имени модуля и объекта в модуле.

  Параметры:
  moduleName                  - Имя модуля
  objectName                  - Имя объекта в модуле (пакета, типа, скрипта)

  Возврат:
  - имя логера
*/
static function getLoggerName(
  moduleName varchar2
  , objectName varchar2
)
return varchar2
is
begin
  return
    moduleName
    || case when objectName is not null then '.' || objectName end
  ;
end getLoggerName;

/* func: getLogger
  Возвращает логер по имени либо по имени модуля и объекта в модуле.

  Параметры:
  loggerName                  - Имя логера
                                (по умолчанию формируется из moduleName и
                                 objectName)
  objectName                  - Имя объекта в модуле (пакета, типа, скрипта)
                                (по умолчанию отсутствует)
  moduleName                  - Имя модуля
                                (по умолчанию для совместимости берется из
                                loggerName если указан objectName)
  findModuleString            - Строка для определения Id модуля в ModuleInfo
                                (может совпадать с одним из трех атрибутов
                                модуля: названием, путем к корневому каталогу,
                                первоначальным путем к корневому каталогу в
                                Subversion)
                                (по умолчанию используется moduleName)

  Возврат:
  - логер

  Замечания:
  - если в качестве значений параметров передан null, возвращает корневой
    логер (более очевидным в этом случае является использование функции
    <getRootLogger>);
  - предпочтительным вариантом является указание moduleName и опционально
    objectName вместо использования loggerName;
  - при использовании loggerName часть строки до первой точки считается именем
    модуля (moduleName), оставшая часть строки (после первой точки) считается
    именем объекта в модуле (objectName);
  - необязательный параметр packageName присутствует для совместимости и не
    должен использоваться, вместо него следует использовать objectName;
*/
static function getLogger(
  loggerName varchar2 := null
  , objectName varchar2 := null
  , moduleName varchar2 := null
  , findModuleString varchar2 := null
  , packageName varchar2 := null
)
return lg_logger_t
is

  -- Имя модуля передано в первом параметре
  -- (поддержка использования позиционной нотации)
  loggerIsModuleName boolean :=
    moduleName is null
    and coalesce( objectName, packageName) is not null
  ;

begin
  return
    lg_logger_t(
      -- считаем, что вызов getLogger( s1, s2) соответствует
      -- вызову getLogger( moduleName => s1, objectName => s2)
      loggerName          =>
          case when not loggerIsModuleName then
            loggerName
          end
      , moduleName        =>
          case when not loggerIsModuleName then
            moduleName
          else
            loggerName
          end
      , objectName        => coalesce( objectName, packageName)
      , findModuleString  => findModuleString
    )
  ;
end getLogger;



/* group: Настройка логера */

/* func: getLevel
  Возвращает назначенный уровень логирования.

  Замечания:
  - вызывает функцию <pkg_LoggingInternal.getLevel>;

  Возврат:
  - код уровня логирования
*/
member function getLevel
return varchar2
is
begin
  return
    pkg_LoggingInternal.getLevel(
      loggerUid       => loggerUid
    );
end getLevel;

/* proc: setLevel
  Устанавливает уровень логирования.

  Параметры:
  levelCode                   - код уровня логируемых сообщений

  Замечания:
  - вызывает процедуру <pkg_LoggingInternal.setLevel>;
*/
member procedure setLevel(
  self in lg_logger_t
  , levelCode varchar2
)
is
begin
  pkg_LoggingInternal.setLevel(
    loggerUid         => loggerUid
    , levelCode       => levelCode
  );
end setLevel;

/* func: getEffectiveLevel
  Возвращает эффективный уровень логирования.

  Замечания:
  - вызывает функцию <pkg_LoggingInternal.getEffectiveLevel>;

  Возврат:
  - код уровня логирования
*/
member function getEffectiveLevel
return varchar2
is
begin
  return
    pkg_LoggingInternal.getEffectiveLevel(
      loggerUid       => loggerUid
    );
end getEffectiveLevel;

/* func: isEnabledFor
  Возвращает истину, если сообщение данного уровня будет логироваться.

  Параметры:
  levelCode                   - код уровня логирования

  Замечания:
  - вызывает функцию <pkg_LoggingInternal.isEnabledFor>;
*/
member function isEnabledFor(
  levelCode varchar2
)
return boolean
is
begin
  return
    pkg_LoggingInternal.isEnabledFor(
      loggerUid     => loggerUid
      , levelCode   => levelCode
    );
end isEnabledFor;

/* func: isInfoEnabled
  Возвращает истину, если информационное сообщение будет логироваться.

  Замечания:
  - вызывает функцию <isEnabledFor>;
*/
member function isInfoEnabled
return boolean
is
begin
  return isEnabledFor( pkg_Logging.Info_LevelCode);
end isInfoEnabled;

/* func: isDebugEnabled
  Возвращает истину, если отладочное сообщение будет логироваться.

  Замечания:
  - вызывает функцию <isEnabledFor>;
*/
member function isDebugEnabled
return boolean
is
begin
  return isEnabledFor( pkg_Logging.Debug_LevelCode);
end isDebugEnabled;

/* func: isTraceEnabled
  Возвращает истину, если трассировочное сообщение будет логироваться.

  Замечания:
  - вызывает функцию <isEnabledFor>;
*/
member function isTraceEnabled
return boolean
is
begin
  return isEnabledFor( pkg_Logging.Trace_LevelCode);
end isTraceEnabled;



/* group: Логирование сообщений */

/* proc: log
  Логирует сообщение с указанным уровнем.

  Параметры:
  levelCode                   - Код уровня сообщения
  messageText                 - Текст сообщения
  messageValue                - Целочисленное значение, связанное с сообщением
                                (по умолчанию отсутствует)
  messageLabel                - Строковое значение, связанное с сообщением
                                (по умолчанию отсутствует)
  contextTypeShortName        - Краткое наименование типа
                                открываемого/закрываемого контекста выполнения
                                (по умолчанию отсутствует)
  contextValueId              - Идентификатор, связанный с
                                открываемым/закрываемым контекстом выполнения
                                (по умолчанию отсутствует)
  openContextFlag             - Флаг открытия контекста выполнения
                                (1 открытие контекста, 0 закрытие контекста,
                                -1 открытие и немедленное закрытие контекста,
                                null контекст не меняется)
                                (по умолчанию -1 если указан
                                contextTypeShortName, иначе null)
  contextTypeModuleId         - Id модуля в ModuleInfo, к которому относится
                                открываемый/закрываемый контекст выполнения
                                (по умолчанию Id модуля, к которому относится
                                логер)
*/
member procedure log(
  self in lg_logger_t
  , levelCode varchar2
  , messageText varchar2
  , messageValue integer := null
  , messageLabel varchar2 := null
  , contextTypeShortName varchar2 := null
  , contextValueId integer := null
  , openContextFlag integer := null
  , contextTypeModuleId integer := null
)
is
begin
  pkg_LoggingInternal.logMessage(
    levelCode               => levelCode
    , messageText           => messageText
    , messageValue          => messageValue
    , messageLabel          => messageLabel
    , contextTypeShortName  => contextTypeShortName
    , contextValueId        => contextValueId
    , openContextFlag       => openContextFlag
    , contextTypeModuleId   => contextTypeModuleId
    , loggerUid             => loggerUid
  );
end log;

/* proc: fatal
  Логирует сообщение о фатальной ошибке (уровня <getFatalLevelCode>).

  Параметры:
  messageText                 - Текст сообщения
  ...                         - Необязательные параметры, идентичные
                                необязательным параметрам процедуры <log>
*/
member procedure fatal(
  self in lg_logger_t
  , messageText varchar2
  , messageValue integer := null
  , messageLabel varchar2 := null
  , contextTypeShortName varchar2 := null
  , contextValueId integer := null
  , openContextFlag integer := null
  , contextTypeModuleId integer := null
)
is
begin
  log(
    levelCode               => pkg_Logging.Fatal_LevelCode
    , messageText           => messageText
    , messageValue          => messageValue
    , messageLabel          => messageLabel
    , contextTypeShortName  => contextTypeShortName
    , contextValueId        => contextValueId
    , openContextFlag       => openContextFlag
    , contextTypeModuleId   => contextTypeModuleId
  );
end fatal;

/* proc: error
  Логирует сообщение об ошибке (уровня <getErrorLevelCode>).

  Параметры:
  messageText                 - Текст сообщения
  ...                         - Необязательные параметры, идентичные
                                необязательным параметрам процедуры <log>
*/
member procedure error(
  self in lg_logger_t
  , messageText varchar2
  , messageValue integer := null
  , messageLabel varchar2 := null
  , contextTypeShortName varchar2 := null
  , contextValueId integer := null
  , openContextFlag integer := null
  , contextTypeModuleId integer := null
)
is
begin
  log(
    levelCode               => pkg_Logging.Error_LevelCode
    , messageText           => messageText
    , messageValue          => messageValue
    , messageLabel          => messageLabel
    , contextTypeShortName  => contextTypeShortName
    , contextValueId        => contextValueId
    , openContextFlag       => openContextFlag
    , contextTypeModuleId   => contextTypeModuleId
  );
end error;

/* proc: warn
  Логирует предупреждающее сообщение (уровня <getWarnLevelCode>).

  Параметры:
  messageText                 - Текст сообщения
  ...                         - Необязательные параметры, идентичные
                                необязательным параметрам процедуры <log>
*/
member procedure warn(
  self in lg_logger_t
  , messageText varchar2
  , messageValue integer := null
  , messageLabel varchar2 := null
  , contextTypeShortName varchar2 := null
  , contextValueId integer := null
  , openContextFlag integer := null
  , contextTypeModuleId integer := null
)
is
begin
  log(
    levelCode               => pkg_Logging.Warn_LevelCode
    , messageText           => messageText
    , messageValue          => messageValue
    , messageLabel          => messageLabel
    , contextTypeShortName  => contextTypeShortName
    , contextValueId        => contextValueId
    , openContextFlag       => openContextFlag
    , contextTypeModuleId   => contextTypeModuleId
  );
end warn;

/* proc: info
  Логирует информационое сообщение (уровня <getInfoLevelCode>).

  Параметры:
  messageText                 - Текст сообщения
  ...                         - Необязательные параметры, идентичные
                                необязательным параметрам процедуры <log>
*/
member procedure info(
  self in lg_logger_t
  , messageText varchar2
  , messageValue integer := null
  , messageLabel varchar2 := null
  , contextTypeShortName varchar2 := null
  , contextValueId integer := null
  , openContextFlag integer := null
  , contextTypeModuleId integer := null
)
is
begin
  log(
    levelCode               => pkg_Logging.Info_LevelCode
    , messageText           => messageText
    , messageValue          => messageValue
    , messageLabel          => messageLabel
    , contextTypeShortName  => contextTypeShortName
    , contextValueId        => contextValueId
    , openContextFlag       => openContextFlag
    , contextTypeModuleId   => contextTypeModuleId
  );
end info;

/* proc: debug
  Логирует отладочное сообщение (уровня <getDebugLevelCode>).

  Параметры:
  messageText                 - Текст сообщения
  ...                         - Необязательные параметры, идентичные
                                необязательным параметрам процедуры <log>
*/
member procedure debug(
  self in lg_logger_t
  , messageText varchar2
  , messageValue integer := null
  , messageLabel varchar2 := null
  , contextTypeShortName varchar2 := null
  , contextValueId integer := null
  , openContextFlag integer := null
  , contextTypeModuleId integer := null
)
is
begin
  log(
    levelCode               => pkg_Logging.Debug_LevelCode
    , messageText           => messageText
    , messageValue          => messageValue
    , messageLabel          => messageLabel
    , contextTypeShortName  => contextTypeShortName
    , contextValueId        => contextValueId
    , openContextFlag       => openContextFlag
    , contextTypeModuleId   => contextTypeModuleId
  );
end debug;

/* proc: trace
  Логирует трассировочное сообщение (уровня <getTraceLevelCode>).

  Параметры:
  messageText                 - Текст сообщения
  ...                         - Необязательные параметры, идентичные
                                необязательным параметрам процедуры <log>
*/
member procedure trace(
  self in lg_logger_t
  , messageText varchar2
  , messageValue integer := null
  , messageLabel varchar2 := null
  , contextTypeShortName varchar2 := null
  , contextValueId integer := null
  , openContextFlag integer := null
  , contextTypeModuleId integer := null
)
is
begin
  log(
    levelCode               => pkg_Logging.Trace_LevelCode
    , messageText           => messageText
    , messageValue          => messageValue
    , messageLabel          => messageLabel
    , contextTypeShortName  => contextTypeShortName
    , contextValueId        => contextValueId
    , openContextFlag       => openContextFlag
    , contextTypeModuleId   => contextTypeModuleId
  );
end trace;



/* group: Стек ошибок ( исключений) */

/* func: errorStack
  Сохраняет сообщение в стек ошибок
  и возвращает строку для генерации исключения.

  Параметры:
  messageText                 - текст сообщения
	logMessageFlag 							- Флаг логирования сообщения при выполнении
                                функции
                                (1 логировать, 0 логировать если указано
                                значение closeContextTypeShortName, по
                                умолчанию логировать если указано значение
                                любого из параметров
                                closeContextTypeShortName, levelCode,
                                messageValue, messageLabel)
  closeContextTypeShortName   - Краткое наименование типа закрываемого
                                контекста выполнения
                                (по умолчанию отсутствует)
  contextValueId              - Идентификатор, связанный с закрываемым
                                контекстом выполнения
                                (по умолчанию отсутствует)
  contextTypeModuleId         - Id модуля в ModuleInfo, к которому относится
                                закрываемый контекст выполнения (по умолчанию
                                Id модуля, к которому относится логер)
  levelCode                   - Код уровня сообщения
                                (по умолчанию "Ошибка" ("ERROR"))
  messageValue                - Целочисленное значение, связанное с сообщением
                                (по умолчанию отсутствует)
  messageLabel                - Строковое значение, связанное с сообщением
                                (по умолчанию отсутствует)

  Возврат:
  - соообщение для генерации исключения
    ( второй аргумент для raise_application_error).
    В простейшем случае, то есть в случае
    достаточно короткого сообщения
    ( см. <pkg_LoggingErrorStack::body::Stack_Message_Limit>)
    возвращает messageText

  Замечания:
  - вызывает процедуру <pkg_LoggingErrorStack.processStackElement>
    (см. также <Описание::Логирование стека ошибок>);
  - если указано значение closeContextTypeShortName, то предварительно будет
    выполнено закрытие указанного контекста выполнения;
  - текст сообщения, логируемого при выполнении функции, состоит из
    префикса "Закрытие контекста выполнения в связи с ошибкой:", добавляемого
    если closeContextTypeShortName отличен от null и logMessageFlag не равен 1,
    значения messageText и текущего стека ошибок, возвращаемого функцией
    <getErrorStack> (с указанием isStackPreserved равного 1);
*/
member function errorStack(
  messageText varchar2
  , logMessageFlag integer := null
  , closeContextTypeShortName varchar2 := null
  , contextValueId integer := null
  , contextTypeModuleId integer := null
  , levelCode varchar2 := null
  , messageValue integer := null
  , messageLabel varchar2 := null
)
return varchar2
is
begin
  if logMessageFlag = 1
      or closeContextTypeShortName is not null
      or coalesce( logMessageFlag != 0, true)
        and (
          levelCode is not null
          or messageValue is not null
          or messageLabel is not null
        )
      then
    log(
      levelCode               =>
          coalesce( levelCode, pkg_Logging.Error_LevelCode)
      , messageText           =>
          case when
            closeContextTypeShortName is not null
            and coalesce( logMessageFlag != 1, true)
          then
            'Закрытие контекста выполнения в связи с ошибкой:' || chr(10)
          end
          || messageText
          || chr(10) || getErrorStack( isStackPreserved => 1)
      , messageValue          => messageValue
      , messageLabel          => messageLabel
      , contextTypeShortName  => closeContextTypeShortName
      , contextValueId        => contextValueId
      , openContextFlag       =>
          case when closeContextTypeShortName is not null then
            0
          end
      , contextTypeModuleId   => contextTypeModuleId
    );
  end if;
  return
    pkg_LoggingErrorStack.processStackElement(
      messageText => messageText
    );
end errorStack;

/* func: remoteErrorStack
  Сохраняет сообщение в стек ошибок, учитывая
  возможные данные о стеке на удалённой БД,
  и возвращает строку для генерации исключения.

  Параметры:
  messageText                 - текст сообщения

  Возврат:
  - соообщение для генерации исключения
    ( второй аргумент для raise_application_error).
    В простейшем случае, то есть в случае
    достаточно короткого сообщения
    ( см. <pkg_LoggingErrorStack::body::Stack_Message_Limit>)
    возвращает messageText

  Замечания:
  - вызывает процедуру <pkg_LoggingErrorStack.ProcessRemoteStackElement>;
  - в удалённой базе рекомендуется установить актуальную версию
    модуля Logging;
  - перед вызовом рекомендуется откатить распределённую транзакцию;
  - см. также <Описание::Логирование стека ошибок>;
*/
member function remoteErrorStack(
  messageText varchar2
  , dbLink varchar2
)
return varchar2
is
begin
  return
    pkg_LoggingErrorStack.processRemoteStackElement(
      messageText => messageText
      , dbLink => dbLink
    );
end remoteErrorStack;

/* func: getErrorStack
  Получает строку стека ошибок и очищает информацию о стеке.

  Параметры:
  isStackPreserved            - оставлять ли данные по стеку. По-умолчанию (
                                null) не оставлять ( т.е. очищать), таким
                                образом по-умолчанию после вызова стек не
                                может быть соединён далее.

  Возврат:
  - стек ошибок

  Замечания:
  - вызывает процедуру <pkg_LoggingErrorStack.getErrorStack>;
  - см. также <Описание::Логирование стека ошибок>;
*/
member function getErrorStack(
  isStackPreserved integer := null
)
return varchar2
is
begin
  return
    pkg_LoggingErrorStack.getErrorStack(
      isStackPreserved => isStackPreserved
    );
end getErrorStack;

/* proc: clearErrorStack
  Очищает (сбрасывает) предыдущую информацию о стеке ошибок.

  Замечания:
  - вызывает процедуру <pkg_LoggingErrorStack.clearLastStack>;
  - см. также <Описание::Логирование стека ошибок>;
*/
member procedure clearErrorStack
is
begin
  pkg_LoggingErrorStack.clearLastStack();
end clearErrorStack;



/* group: Типы контекста выполнения */

/* func: mergeContextType
  Создает или обновляет тип контекста выполнения.

  Параметры:
  contextTypeShortName        - Краткое наименование типа контекста
  contextTypeName             - Наименование типа контекста
  nestedFlag                  - Флаг вложенного контекста (1 да, 0 нет)
  contextTypeDescription      - Описание типа контекста

  Возврат:
  - флаг внесения изменений (0 нет изменений, 1 если изменения внесены)

  Замечания:
  - считается, что тип контекста выполнения относится к модулю, к которому
    относится текущий экземпляр логера;
  - в случае, если для логера не был определен Id модуля в ModuleInfo
    (например, для корневого логера) выполнение завершается с ошибкой;
  - для вложенных контекстов подсчитывается уровень вложенности (значения
    context_level и context_type_level таблицы lg_log), при закрытии
    вложенного контекста незакрытые вложенные контексты большего уровня
    (открытые позже) закрываются автоматически, вложенный контекст закрывается
    с учетом связанного с ним значения (context_value_id), невложенный без
    учета значения;
*/
member function mergeContextType(
  contextTypeShortName varchar2
  , contextTypeName varchar2
  , nestedFlag integer
  , contextTypeDescription varchar2
)
return integer
is
begin
  return
    pkg_LoggingInternal.mergeContextType(
      loggerUid                 => self.loggerUid
      , contextTypeShortName    => contextTypeShortName
      , contextTypeName         => contextTypeName
      , nestedFlag              => nestedFlag
      , contextTypeDescription  => contextTypeDescription
    )
  ;
end mergeContextType;

/* proc: mergeContextType( PROC)
  Создает или обновляет тип контекста выполнения.
  Процедура идентична функции <mergeContextType> за исключением отсутствия
  возвращаемого значения.
*/
member procedure mergeContextType(
  self in lg_logger_t
  , contextTypeShortName varchar2
  , contextTypeName varchar2
  , nestedFlag integer
  , contextTypeDescription varchar2
)
is

  changeFlag integer;

begin
  changeFlag := pkg_LoggingInternal.mergeContextType(
    loggerUid                 => self.loggerUid
    , contextTypeShortName    => contextTypeShortName
    , contextTypeName         => contextTypeName
    , nestedFlag              => nestedFlag
    , contextTypeDescription  => contextTypeDescription
  );
end mergeContextType;

/* proc: deleteContextType
  Удаляет тип контекста выполнения.

  Параметры:
  contextTypeShortName        - Краткое наименование типа контекста

  Замечания:
  - считается, что тип контекста выполнения относится к модулю, к которому
    относится текущий экземпляр логера;
  - при отсутствии использования в логе запись удаляется физически, иначе
    ставится флаг логического удаления;
*/
member procedure deleteContextType(
  self in lg_logger_t
  , contextTypeShortName varchar2
)
is
begin
  pkg_LoggingInternal.deleteContextType(
    loggerUid                => self.loggerUid
    , contextTypeShortName   => contextTypeShortName
  );
end deleteContextType;

end;
/
