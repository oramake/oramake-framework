#!/bin/bash

# script: oms-connect-info
# Возвращает параметры подключения к Oracle.
#
# Использование:
#   oms-connect-info [options]
#
# Опции:
#       --default-db NAME     - задает имя БД для подключения ( игнорируется в
#                               в случае противоречия с --userid)
#   -h, --help                - вывести справку по использованию
#   --ignore-absent-password  - игнорировать отсутствие пароля для подключения
#                               ( по умолчанию)
#       --operatorid STR      - задает оператора для регистрации при подключении
#                               ( формат: operatorName[/passwd])
#       --out-operatorid      - вывод в формате: operatorName[/passwd]
#       --out-userid          - вывод в формате: userName[/passwd]@db
#       --userid STR          - задает пользователя для подключения
#                               ( формат: userName[/passwd][@db])
#       --version             - вывести информацию по версии
#
# Замечания:
# - при отсутствии имени пользователя для подключения используется пользователь
#   по умолчанию для БД ( определяется в функции
#   <connect.sh::cspGetDefaultUserName>);
# - при отсутствии переданного в параметре --userid пароля пользователя БД для
#   его получения будет вызвана функция <connect.sh::cspGetUserPassword>;
# - при отсутствии переданного в параметре --operatorid пароля оператора для
#   его получения будет вызвана функция <connect.sh::cspGetOperatorPassword>;
#



# group: Переменные



# group: Информация о версии

# var: OMS_VERSION
# Версия программы
OMS_VERSION=2.4.0

# var: fileRevisionValue
# Строка с номером последней правки, в которой был изменен файл
fileRevisionValue='$Revision:: 26864384 $'

# var: fileChangeDateValue
# Строка с последней датой изменения файла
fileChangeDateValue='$Date:: 2021-01-28 14:44:37 -0500 #$'



# Подключение общих констант и функций
source oms-common.sh || exit 11

# Подключение пользовательских настроечных функций
source ${configDir}/connect.sh || exit 12



# group: Параметры вызова

# var: defaultDbName
# Имя БД по умолчанию
defaultDbName=""

# var: ignoreAbsentPassword
# Игнорировать отсутствие пароля
ignoreAbsentPassword=1

# var: isOutUserId
# Вывод параметров подклчюения в формате userName[/passwd]@db
isOutUserId=0

# var: isOutOperatorId
# Вывод параметров оператора формате operatorId[/passwd]
isOutOperatorId=0

# var: userId
# Пользователь для подключения
userId=""

# var: operatorId
# Оператор для подключения
operatorId=""



# group: Параметры выполнения

# var: userName
# Имя пользователя
userName=""

# var: userPassword
# Пароль пользователя для подключения
userPassword=""

# var: dbName
# Имя БД
dbName=""

# var: operatorName
# Имя оператора
operatorName=""

# var: operatorPassword
# Пароль оператора для подключения
operatorPassword=""



# group: Функции



# func: usage
# Выводит информацию об использовании.
#
usage()
{
  cat <<END
Print Oracle connection parameters.

Usage:
  oms-connect-info [options]

Options:
      --default-db NAME       set database name ( ignore if not like --userid)
  -h, --help                  show this help
      --ignore-absent-password
                              ignore absent password ( default)
      --operatorid STR        set operator ( operatorName[/passwd])
      --out-operatorid        output in format: operatorName[/passwd]
      --out-userid            output in format: userName[/passwd]@db ( default)
      --userid STR            set connection user ( userName[/passwd][@db])
      --version               print version
END
}



# func: parseOption
# Разбор аргументов командной строки.
#
# Параметры:
# ...                         - аргументы командной строки
#
parseOption()
{
  while [ $# != 0 ]; do
    case $1 in
      --default-db)
        defaultDbName="$2"; shift;
        logDebug3 "Set defaultDbName: '$defaultDbName'"
        ;;
      -h | --help)
        usage
        exitScript
        ;;
      --ignore-absent-password)
        ignoreAbsentPassword=1;
        logDebug3 "Set ignoreAbsentPassword: '$ignoreAbsentPassword'"
        ;;
      --operatorid)
        operatorId="$2"; shift;
        logDebug3 "Set operatorId: '$operatorId'"
        ;;
      --out-operatorid)
        isOutOperatorId=1;
        logDebug3 "Set isOutOperatorId: '$isOutOperatorId'"
        ;;
      --out-userid)
        isOutUserId=1;
        logDebug3 "Set isOutUserId: '$isOutUserId'"
        ;;
      --userid)
        userId="$2"; shift;
        logDebug3 "Set userId: '$userId'"
        ;;
      --version)
        showVersion
        exitScript
        ;;
      -* | --*)
        exitArgError "Illegal option: \"$1\"."
        ;;
      *)
        exitArgError "Illegal argument: \"$1\"."
        ;;
    esac
    shift
  done

  if (( ! $isOutUserId && ! $isOutOperatorId )); then
    if [[ -n "$operatorId" && -z "$userId" && -z "$defaultDbName" ]]; then
      isOutOperatorId=1;
    fi
  fi
}



# func: parseConnectString
# Разбирает строку соединения.
#
# Параметры:
# $1                    - строка соединения
# $2                    - код формата строки соединения
#                         "db":   [userName[/userPassword]@]dbName
#                         "user": userName[[/userPassword]@dbName]
# Возврат:
# userName              - имя пользователя
# userPassword          - пароль пользователя
# dbName                - имя БД
parseConnectString()
{
  local str="$1"
  local user=""
  local password=""
  local db=""
  if [[ -n "$str" ]] ; then
    user="${str%@*}"
    if [[ "$str" == "$user" && "$2" == "db" ]]; then
      db="$user"
      user=""
    else
      db="${str##$user}"
      if [[ -n "$db" ]]; then
        db="${db:1}"
      fi
      password="${user#*/}"
      if [[ "$password" == "$user" ]] ; then
        password=""
      else
        user="${user%%/*}"
      fi
    fi
    userName="$user"
    userPassword="$password"
    dbName="$db"
  fi
}



# func: outUserId
# Определяет и выводит параметры подключения к Oracle.
#
outUserId()
{
  if [[ -z "$defaultDbName" && -z "$userId" ]]; then
    exitArgError "Not set connection userid or db."
  fi
                                        # Разбираем параметры пользователя
  parseConnectString "$userId" "user"
  if [[ -z "$dbName" ]]; then
    dbName="$defaultDbName"
  fi
                                        # Обрабатываем имя БД
  if [[ -z "$dbName" ]]; then
    exitArgError "Not set connection database."
  fi
                                        # Переводим в нижний регистр
  dbName="`echo "$dbName" | tr "[:upper:]" "[:lower:]"`"

                                        # Обрабатываем имя пользователя
  if [[ -z "$userName" ]]; then
    cspGetDefaultUserName "$dbName"
  fi
  if [[ -z "$userName" ]]; then
    exitArgError "Not set connection user."
  fi
                                        # Переводим в нижний регистр
  userName="`echo "$userName" | tr "[:upper:]" "[:lower:]"`"
                                        # Пытаемся получить пароль
  if [[ -z "$userPassword" ]]; then
    cspGetUserPassword "$dbName" "$userName"
  fi
                                        # Вывод результата
  if [[ -n "$userPassword" ]]; then
    echo "$userName/$userPassword@$dbName"
  else
    echo "$userName@$dbName"
  fi
}



# func: outOperatorId
# Определяет и выводит параметры регистрации оператора в Oracle.
#
outOperatorId()
{
  if [[ -z "$operatorId" ]]; then
    exitArgError "Not set operatorid."
  fi
                                        # Выделение имени и пароля
  operatorName=${operatorId%%/*};
  if [[ "$operatorName" == "$operatorId" ]]; then
    operatorPassword=""
  else
    operatorPassword=${operatorId#*/}
  fi
                                        # Пытаемся получить пароль
  if [[ -z "$operatorPassword" ]]; then
    cspGetOperatorPassword "$operatorName"
  fi
                                        # Вывод результата
  if [[ -n "$operatorPassword" ]]; then
    echo "$operatorName/$operatorPassword"
  else
    echo "$operatorName"
  fi
}



# Разбор параметров
parseOption "$@"

# Обработка и вывод результата
if (( $isOutUserId || ! $isOutOperatorId )); then
  outUserId
fi
if (( $isOutOperatorId )); then
  outOperatorId
fi

# Возвращаем результат выполнения
if [[ $? != 0 ]] ; then
  exitError
fi
