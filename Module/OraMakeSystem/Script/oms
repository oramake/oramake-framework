#!/bin/bash

# script: oms
# Выполняет команду по управлению прикладным модулем.
#
# Использование:
#   oms <command> [<options>] [<args>]
#
# Выполнение "oms --version" выводит информацию о версии скрипта.
# Выполнение "oms --help" выводит справочную информацию со списком команд.
#
# Возможные команды ( <command>):
#    create-module              - создает структуру нового модуля
#    gen-schema-run             - генерация файла по установке последней версии
#                                 объектов модудя в БД ( run.sql)
#    gen-schema-revert          - генерация файла по удалению объектов модуля
#                                 из БД
#    gen-spec                   - генерирует спецификацию по телу plsql-объекта
#                                 ( вызывает скрипт <oms-gen-spec>)
#    set-version                - установка версии модуля
#    show-svn-info              - вывод информации о файла модуля из Subversion
#    update-module              - обновляет файлы OMS, входящие в состав модуля
#                                 ( вызывает скрипт <oms-update-module>)
#
# Допустимые значения опций ( <options>) и аргументов ( <args>) зависят от
# выбранной команды ( <command>).
#
# Введите "oms <command> --help" для получения справки по определенной команде.
#



# group: Переменные



# group: Информация о версии

# var: OMS_VERSION
# Версия программы
OMS_VERSION=2.2.0

# var: fileRevisionValue
# Строка с номером последней правки, в которой был изменен файл
fileRevisionValue='$Revision:: 26056103 $'

# var: fileChangeDateValue
# Строка с последней датой изменения файла
fileChangeDateValue='$Date:: 2019-07-17 15:23:16 +0300 #$'



# Подключение общих констант и функций
source oms-common.sh || exit 11



# group: Настроечные параметры

# var: omsCommandList
# Список команд, обрабатываемых скриптом
declare -a omsCommandList=( \
  "create-module" \
  "gen-schema-revert" \
  "gen-schema-run" \
  "gen-spec" \
  "set-version" \
  "show-svn-info" \
  "update-module" \
)

# var: commandScriptList
# Scripts that implement external commands
# ( associative array <command> -> <script>)
declare -A commandScriptList=( \
  ["gen-spec"]='oms-gen-spec' \
  ["update-module"]='oms-update-module' \
)



# group: Параметры вызова ( общие)

# var: rootDir
# Корневой каталог модуля.
rootDir=""

# var: omsCommand
# Команда, которую нужно выполнить для модуля.
omsCommand=""



# group: Параметры вызова ( для отдельных команд)

# var: isOverwrite
# Переписывать существующие файлы
# ( используется в команде <create-module>)
isOverwrite=0

# var: isQuiet
# Флаг минимизации выводимой информации
# ( используется в командах <set-version>, <show-svn-info>).
isQuiet=""

# var: isUsedOnly
# Флаг установки указанного номера версии только в случае его использования
# в файлах модуля
# ( используется в команде <set-version>).
isUsedOnly=""

# var: moduleName
# Имя модуля
# ( используется в команде <create-module>)
moduleName=""

# var: moduleVersion
# Версия модуля
# ( используется в команде <set-version>)
moduleVersion=""

# var: packageName
# Имя пакета
# ( используется в команде <create-module>)
packageName=""



# group: Параметры выполнения

# var: isUseSubversion
# Флаг возможности использования Subversion
isUseSubversion=0



# group: Возврат значений из функций

# var: processCommonOptionCount
# Устанавливается в функции <processCommonOption>.
#
processCommonOptionCount=0



# group: Функции



# group: Общие



# func: usage
# Выводит информацию об использовании.
#
usage()
{
  cat <<END
Execute command for module.

Usage:
  oms <command> [<options>] [<args>]

Type 'oms --version' to see script version.
Type 'oms --help' to see this help.

Available commands:
END

  local cmd
  for cmd in "${omsCommandList[@]}"; do
    echo "  $cmd"
  done

  cat <<END

The valid values for options (<options>) and arguments (<args>) depend
on the selected command (<command>).

Type 'oms <command> --help' for help on a specific command.
END
}



# func: processCommonOption
# Разбор общих опций командной строки.
#
# Параметры:
# ...                         - аргументы командной строки
#
# Возврат:
# processCommonOptionCount    - число обработанных аргументов
#
processCommonOption()
{
  logDebug2 "start[$#]:" "$@"
  processCommonOptionCount=0
  while [ $# != 0 ]; do
    case $1 in
      --debug-level)
        setDebugLevel "$2"
        (( ++processCommonOptionCount ))
        shift
        ;;
      -d | --directory)
        rootDir="$2"
        logDebug3 "Set rootDir: '$rootDir'"
        (( ++processCommonOptionCount ))
        shift
        ;;
      -h | --help)
        if [[ -z $omsCommand ]]; then
          usage
        else
          usage_$omsCommand
        fi
        exitScript
        ;;
      *)
        break
        ;;
    esac
    (( ++processCommonOptionCount ))
    shift
  done
  logDebug3 "finished: processCommonOptionCount=$processCommonOptionCount"
}



# func: parseOption
# Разбор аргументов командной строки.
#
# Параметры:
# ...                         - аргументы командной строки
#
parseOption()
{
  logDebug2 "start..."
  while [ $# != 0 ]; do
    if [[ -z $omsCommand ]]; then

      # ability to specify options before command (for compatibility)
      if [[ "${0##*/}" == "oms-module" ]]; then
        processCommonOption "$@"
      fi

      if ! (( processCommonOptionCount )); then
        case $1 in
          -h | --help)
            usage
            exitScript
            ;;
          --version)
            showVersion
            exitScript
            ;;
          -* | --*)
            exitArgError "Illegal option before command: '$1'."
            ;;
          *)
            local cmd
            for cmd in "${omsCommandList[@]}"; do
              if [[ $cmd == $1 ]]; then
                omsCommand="$1"
                logDebug3 "Set omsCommand: '$omsCommand'"
                break
              fi
            done
            if [[ -z "$omsCommand" ]] ; then
              exitArgError "Unknown command: '$1'."
            fi
            ;;
        esac
        shift
      else
        shift $processCommonOptionCount
      fi
    else
      case $1 in
        -* | --*)
          exitArgError "Illegal command option: '$1'."
          ;;
        *)
          exitArgError "Illegal command argument: '$1'."
          ;;
      esac
    fi
    if [[ -n $omsCommand ]]; then
      if [[ -n ${commandScriptList["$omsCommand"]} ]]; then
        break
      else
        local parseFunction="parseOption_$omsCommand"
        if type -t $parseFunction >/dev/null; then
          $parseFunction "$@"
          break
        fi
      fi
    fi
  done

  # Проверяем параметры выполнения
  if [[ -z "$omsCommand" ]]; then
    usage
    exitArgError
  fi

  # Устанавливаем значения по умолчанию
  if [[ -z ${commandScriptList["$omsCommand"]} ]]; then
    if [[ -z $rootDir ]]; then
      rootDir="."
      logDebug3 "Set rootDir: '$rootDir'"
    fi
  fi
}



# func: execCommandScript
# Run script that implement external command.
#
execCommandScript()
{
  local commandScript=${commandScriptList["$omsCommand"]}

  # skip comman name
  shift

  # run script from directory of current script
  $( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/$commandScript "$@"
}



# group: create-module
# Создает структуру нового модуля.
#
# Использование:
#   oms create-module [<options>] moduleName
#
# Параметры:
#   moduleName                    имя нового модуля
#
# Опции:
#       --debug-level DBG_LEVEL - установить уровень вывода отладочной
#                                 информации ( 0 не выводить, 1 базовый,
#                                 2 расширенный, 3 расширенный с выводом
#                                 содержимого временных файлов, по умолчанию
#                                 из переменной окружения <OMS_DEBUG_LEVEL>,
#                                 при отсутствии 0)
#   -d, --directory DIR         - путь к корневому каталогу модуля ( по
#                                 умолчанию текущий каталог)
#   -n, --dry-run               - не выполнять команды, а только выводить их
#       --encoding ENCODING     - кодировка файлов модуля ("cp1251" либо
#                                 "utf-8", по умолчанию "cp1251")
#   -h, --help                  - вывести справку по использованию
#   -p, --package-name NAME     - имя пакета ( по умолчанию: pkg_<moduleName>)
#   --overwrite                 - переписывать существующие файлы
#                                 ( по умолчанию: не менять)
#
# Замечания:
#   - в случае, если в качестве корневого каталога ( DIR) указана ".", то
#     структура копируется в текущий каталог;
#   - если корневой каталог зафиксирован в системе контроля версий
#     ( Subversion) и доступна команда svn, то создаваемые ( переписываемые)
#     файлы автоматически добавляются в Subversion с помощью команды "svn add",
#     а также для некоторых каталогов устанавливается свойство svn:ignore с
#     помощью "svn propset";
#
#     Для доступности команды svn, путь к подкаталогу bin установленной версии
#     Subversion должен быть добавлен в переменную окружения PATH, кроме того
#     для корректного отображения данных различных кодировок путь к подкаталогу
#     iconv должен быть прописан в переменной окружения APR_ICONV_PATH.



# func: usage_create-module
# Выводит информацию об использовании create-module
# ( см. <exec_create-module>).
usage_create-module()
{
  cat <<END
Create structure of new OMS module.

Usage:
  oms create-module [<options>] MODULE_NAME

Arguments:
  MODULE_NAME                 name of new module

Options:
      --debug-level DBG_LEVEL set level for print debug information ( 0 - 3)
  -d, --directory DIR         used top level directory DIR
                              (default: MODULE_NAME)
  -n, --dry-run               don't actually run any commands; just print them
      --encoding ENCODING     encoding of module's files ("cp1251" or "utf-8")
                              (default: "cp1251")
  -h, --help                  show this help
  -p, --package-name NAME     add package NAME (default: pkg_<MODULENAME>)
      --overwrite             overwrite existing files
END
}



# func: parseOption_create-module
# Разбор параметров команды <create-module>.
#
parseOption_create-module()
{
  logDebug2 "start[$#]:" "$@"
  while [ $# != 0 ]; do
    processCommonOption "$@"
    if ! (( processCommonOptionCount )); then
      case $1 in
        --encoding)
          getModuleEncoding "" "$2" && shift \
            || exitArgError "Illegal value for encoding: '$2'."
          logDebug3 "Set moduleEncoding: $moduleEncoding"
          ;;
        -n | --dry-run)
          setDryRun
          ;;
        -p | --package-name)
          packageName="$2"; shift;
          logDebug3 "Set packageName: '$packageName'"
          ;;
        --overwrite)
          isOverwrite=1;
          logDebug3 "Set isOverwrite: $isOverwrite"
          ;;
        -* | --*)
          exitArgError "Illegal command option: '$1'."
          ;;
        *)
          if [[ -z "$moduleName" ]] ; then
            moduleName="$1"
            logDebug3 "Set moduleName: '$moduleName'"
          else
            exitArgError "Illegal command argument: \"$1\"."
          fi
          ;;
      esac
      shift
    else
      shift $processCommonOptionCount
    fi
  done

  # Проверяем параметры выполнения
  if [[ ! -d "$templateDir" ]]; then
    exitError "Template dir \"$templateDir\" does not exist."
  fi
  if [[ -z "$moduleName" ]]; then
    exitArgError "Not set modulename."
  fi

  # Устанавливаем значения по умолчанию
  if [[ -z $rootDir ]]; then
    rootDir=$moduleName
    logDebug3 "Set rootDir: '$rootDir'"
  fi
  if [[ -z $packageName ]]; then
    packageName="pkg_$moduleName"
    logDebug3 "Set packageName: '$packageName'"
  fi
}



# func: exec_create-module
# Создает структуру модуля.
#
exec_create-module()
{

  # Начальная версия модуля.
  local moduleVersion="1.0.0"

  # Наличие корневого каталога
  local isRootExist=0
  if [[ -d "$rootDir" ]] ; then
    isRootExist=1

    # Определяем использование Subversion
    getSvnModuleRoot "$rootDir"
    if [[ -n "$svnModuleRoot" ]]; then
      isUseSubversion=1
      getSvnInitialPath "$svnModuleRootUrl"
    fi
  fi

  # Encoding of module's files
  if [[ -z "$moduleEncoding" ]]; then
    if (( isRootExist && ! isOverwrite )); then
      getModuleEncoding "$rootDir"
    else
      getModuleEncoding "" ""
    fi
  fi

  (($isRootExist)) || $runCmd mkdir -p "$rootDir"
  logDebug "Process templateDir: '$templateDir'"

  # Ветки .svn игнорируются для удобства тестирования ( запуск на текущей
  # версии шаблона без выполнения установки)
  for file in $( cd "$templateDir" && find * -name ".svn" -prune -o -print ); do
    logDebug3 "Check template: '$file'"

    # Путь к исходному файлу
    local srcPath="$templateDir/$file"

    # Файл назначения ( с путем от корня)
    local dstFile="$file"

    # обрабатывается каталог?
    ! [[ -d "$srcPath" ]]
    local isDirectory=$?

    # производить подстановку переменных?
    local isExpand=0

    # установить svn:ignore на все файлы?
    local isSetSvnIgnore=0

    # использовать Unix-конец строки
    local isUnixFormat=0

    # Определяем параметры обработки
    case "$file" in
      DB/$templatePackageName.pk? )
        dstFile="${file/$templatePackageName/$packageName}"
        isExpand=1
        ;;
      DB/OmsModule/Load \
        | DB/OmsModule/NaturalDocs/Data )
        isSetSvnIgnore=1
        ;;
      DB/OmsModule/NaturalDocs/Menu.txt \
        )
        isExpand=1
        isUnixFormat=1
        ;;
      Doc/map.xml \
        | DB/Makefile \
        | DB/loaddeps.mk \
        )
        isExpand=1
        ;;
    esac

    # Путь к файлу назначения
    local dstPath="$rootDir/$dstFile"

    # Динамические параметры для sed
    local sedOption=""

    # Обрабатываем файл
    if [[ ! -e "$dstPath" || $isOverwrite -ne 0 ]]
        then
      if ((isDirectory)); then
        if [[ ! -d "$dstPath" ]] ; then
          $runCmd mkdir "$dstPath"
        fi
      elif ((isExpand)); then
        if (( ! isUnixFormat)) ; then
          sedOption=" -e s/\x0D//g -e s/$/\x0D/"
        fi
        if ((isDryRun)); then
          if ((isConvertModuleEncoding)); then
            $runCmd iconv -f "utf-8" -t "$moduleEncoding" "$srcPath"
          else
            $runCmd cat "$srcPath"
          fi
          echo "| sed MACROS: -> \"$dstPath\""
          echo "  \$(moduleName)    : $moduleName"
          echo "  \$(moduleVersion) : $moduleVersion"
          echo "  \$(moduleNlsLang) : $moduleNlsLang"
          echo "  \$(packageName)   : $packageName"
          echo "  \$(svnModuleRoot) : $svnModuleRoot"
          echo "  \$(svnInitialPath): $svnInitialPath"
        else
          if ((isConvertModuleEncoding)); then
            iconv -f "utf-8" -t "$moduleEncoding" "$srcPath"
          else
            cat "$srcPath"
          fi \
          | sed \
            -e "s/\$(moduleName)/$moduleName/g" \
            -e "s/\$(moduleVersion)/$moduleVersion/g" \
            -e "s/\$(moduleNlsLang)/$moduleNlsLang/g" \
            -e "s/\$(packageName)/$packageName/g" \
            -e "s|\$(svnModuleRoot)|$svnModuleRoot|g" \
            -e "s|\$(svnInitialPath)|$svnInitialPath|g" \
            $sedOption  \
            > "$dstPath"
        fi
      else
        if ((isConvertModuleEncoding)); then
          if ((isDryRun)); then
            echo iconv -f "utf-8" -t "$moduleEncoding" \
              "$srcPath" \> "$dstPath"
          else
            iconv -f "utf-8" -t "$moduleEncoding" "$srcPath" > "$dstPath"
          fi
        else
          $runCmd cp "$srcPath" "$dstPath"
        fi
      fi || exitError "Cannot process file \"$dstPath\"."

      # Действия с Subversion
      if (( isUseSubversion)) ; then
        cd "$rootDir" \
          && $runCmd $svnCmd add --non-recursive --quiet "$dstFile" \
          || exitError "Cannot add to Subversion file \"$dstFile\"."
        if ((isSetSvnIgnore)) ; then
          if (( isDryRun )); then
            $runCmd $svnCmd propset svn:ignore -F "*" "$dstFile"
          else
            trap 'rm -f ${tmpFile} ; exit' 0 1 2 3 15
            echo "*" > "$tmpFile" \
              && $svnCmd propset svn:ignore \
                -F "`cygpath --windows $tmpFile`" "$dstFile" >/dev/null \
              || exitError "Cannot set snv:ignore on file \"$dstFile\"."
            rm -f "$tmpFile"
          fi
        fi
        cd "$OLDPWD"
      fi
    else
      logDebug3 "Ignore template: target exists"
    fi
  done
}



# group: gen-schema-revert
# Генерирует файл DB/Install/Schema/Last/revert.sql
# ( см. <Структура каталогов>).
#
# Использование:
#   oms gen-schema-revert [<options>]
#
# Опции:
#       --debug-level DBG_LEVEL - установить уровень вывода отладочной
#                                 информации ( 0 не выводить, 1 базовый,
#                                 2 расширенный, 3 расширенный с выводом
#                                 содержимого временных файлов, по умолчанию
#                                 из переменной окружения <OMS_DEBUG_LEVEL>,
#                                 при отсутствии 0)
#   -d, --directory DIR         - путь к корневому каталогу модуля ( по
#                                 умолчанию текущий каталог)
#   -h, --help                  - вывести справку по использованию
#
# Замечания:
# - для генерации используется информация из имён файлов, поэтому для
#   получения корректного скрипта имена файлов должны соответствовать принятым
#   соглашениям;



# func: usage_gen-schema-revert
# Выводит информацию об использовании gen-schema-revert
# ( см. <exec_gen-schema-revert>).
usage_gen-schema-revert()
{
  cat <<END
Generate file DB/Install/Schema/revert.sql.

Usage:
  oms gen-schema-revert [<options>]

Options:
      --debug-level DBG_LEVEL set level for print debug information ( 0 - 3)
  -d, --directory DIR         path to module root directory ( default: current)
  -h, --help                  show this help
END
}



# func: parseOption_gen-schema-revert
# Разбор параметров команды <gen-schema-revert>.
#
parseOption_gen-schema-revert()
{
  processCommonOption "$@"
  shift $processCommonOptionCount
  if (( $# )); then
    exitArgError "Illegal command option: '$1'."
  fi
}



# func: gen-schema-revert_file
# Выводит текст генерируемого файла в stdout.
gen-schema-revert_file()
{
  cat <<END
-- script: Install/Schema/Last/revert.sql
-- Отменяет установку модуля, удаляя созданные объекты схемы.
END
  local headerFlag=0
  for packageFileName in \
    $(find "$rootDir/DB/"* -maxdepth 0 -name pkg*.pks -exec basename {} \; | sort); do
    if (( headerFlag == 0)); then
      cat <<END


-- Пакеты

END
      headerFlag=1
    fi;
    echo "drop package "${packageFileName%.*}
    echo "/"
  done;
  headerFlag=0
  for typeFileName in \
    $(find "$rootDir/DB/"* -maxdepth 0 -name *_t.typ -exec basename {} \; | sort); do
    if (( headerFlag == 0)); then
      cat <<END


-- Типы

END
      headerFlag=1
    fi;
    echo "@oms-drop-type "${typeFileName%.*}
  done;
  headerFlag=0
  for typeFileName in \
    $(find "$rootDir/DB/"* -maxdepth 0 -name *.jav -exec basename {} \; | sort); do
    if (( headerFlag == 0)); then
      cat <<END


-- Java sources

END
      headerFlag=1
    fi;
    echo "drop java source \""${typeFileName%.*}"\""
    echo "/"
  done;
  headerFlag=0
  for viewFileName in \
    $(find "$rootDir/DB/Install/Schema/Last/"* -maxdepth 0 -name *.vw -exec basename {} \; | sort); do
    if (( headerFlag == 0)); then
      cat <<END


-- Представления

END
      headerFlag=1
    fi;
    echo "drop view "${viewFileName%.*}
    echo "/"
  done
  headerFlag=0
  for tableFileName in \
    $(find "$rootDir/DB/Install/Schema/Last/"* -maxdepth 0 -name *.tab -exec basename {} \; | sort); do
    if (( headerFlag == 0)); then
      cat <<END


-- Внешние ключи

END
      headerFlag=1
    fi
    echo "@oms-drop-foreign-key "${tableFileName%.*}
  done
  headerFlag=0
  for mviewFileName in \
    $(find "$rootDir/DB/Install/Schema/Last/"* -maxdepth 0 -name *.snp -exec basename {} \; | sort); do
    if (( headerFlag == 0)); then
      cat <<END


-- Материализованные представления

END
      headerFlag=1
    fi
    echo "drop materialized view "${mviewFileName%.*}
    echo "/"
  done
  headerFlag=0
  for tableFileName in \
    $(find "$rootDir/DB/Install/Schema/Last/"* -maxdepth 0 -name *.tab -exec basename {} \; | sort); do
    if (( headerFlag == 0)); then
      cat <<END


-- Таблицы

END
      headerFlag=1
    fi
    echo "drop table "${tableFileName%.*}
    echo "/"
  done
  headerFlag=0
  for sequenceFileName in \
    $(find "$rootDir/DB/Install/Schema/Last/"* -maxdepth 0 -name *.sqs -exec basename {} \; | sort); do
    if (( headerFlag == 0)); then
      cat <<END


-- Последовательности

END
      headerFlag=1
    fi
    echo "drop sequence "${sequenceFileName%.*}
    echo "/"
  done
}



# func: exec_gen-schema-revert
# Генерирует файл DB/Install/Schema/revert.sql ( выполнение команды
# <gen-schema-revert>).
exec_gen-schema-revert()
{
  local schemaDir="$rootDir/DB/Install/Schema/Last"
  if [[ ! -d "$schemaDir" ]]; then
    exitError "Schema dir \"$schemaDir\" does not exist."
  fi
  local revertFilePath="$schemaDir/revert.sql"
  local revertFilePathTemp=${revertFilePath}".$$"
  getModuleEncoding "$rootDir"
  gen-schema-revert_file | unix2dos > $revertFilePathTemp
  if (( isConvertModuleEncoding )); then
    iconv -f "utf-8" -t "$moduleEncoding" \
      "$revertFilePathTemp" >"$revertFilePath"
  else
    cp $revertFilePathTemp $revertFilePath
  fi
  rm -f $revertFilePathTemp;
}



# group: gen-schema-run
# Генерирует файл DB/Install/Schema/Last/run.sql
# ( см. <Структура каталогов>).
#
# Использование:
#   oms gen-schema-run [<options>]
#
# Опции:
#       --debug-level DBG_LEVEL - установить уровень вывода отладочной
#                                 информации ( 0 не выводить, 1 базовый,
#                                 2 расширенный, 3 расширенный с выводом
#                                 содержимого временных файлов, по умолчанию
#                                 из переменной окружения <OMS_DEBUG_LEVEL>,
#                                 при отсутствии 0)
#   -d, --directory DIR         - путь к корневому каталогу модуля ( по
#                                 умолчанию текущий каталог)
#   -h, --help                  - вывести справку по использованию
#
# Замечания:
# - для генерации используется информация из имён файлов, поэтому для
#   получения корректного скрипта имена файлов должны соответствовать принятым
#   соглашениям;



# func: usage_gen-schema-run
# Выводит информацию об использовании gen-schema-run
# ( см. <exec_gen-schema-run>).
usage_gen-schema-run()
{
  cat <<END
Generate file DB/Install/Schema/run.sql.

Usage:
  oms gen-schema-run [<options>]

Options:
      --debug-level DBG_LEVEL set level for print debug information ( 0 - 3)
  -d, --directory DIR         path to module root directory ( default: current)
  -h, --help                  show this help
END
}



# func: parseOption_gen-schema-run
# Разбор параметров команды <gen-schema-run>.
#
parseOption_gen-schema-run()
{
  processCommonOption "$@"
  shift $processCommonOptionCount
  if (( $# )); then
    exitArgError "Illegal command option: '$1'."
  fi
}



# func: gen-schema-run_file
# Выводит текст генерируемого файла в stdout.
gen-schema-run_file()
{
  cat <<END
-- script: Install/Schema/Last/run.sql
-- Выполняет установку последней версии объектов схемы.


-- Определяем табличное пространство для индексов
@oms-set-indexTablespace.sql
END
  local headerFlag=0
  for sequenceFileName in \
    $(find "$rootDir/DB/Install/Schema/Last/"* -maxdepth 0 -name *.sqs -exec basename {} \; | sort); do
    if (( headerFlag == 0)); then
      cat <<END


-- Последовательности

END
      headerFlag=1
    fi;
    echo "@oms-run "${sequenceFileName}
  done;
  headerFlag=0
  for tableFileName in \
    $(find "$rootDir/DB/Install/Schema/Last/"* -maxdepth 0 -name *.tab -exec basename {} \; | sort); do
    if (( headerFlag == 0)); then
      cat <<END


-- Таблицы

END
      headerFlag=1
    fi;
    echo "@oms-run "${tableFileName}
  done;
  headerFlag=0
  for mviewFileName in \
    $(find "$rootDir/DB/Install/Schema/Last/"* -maxdepth 0 -name *.snp -exec basename {} \; | sort); do
    if (( headerFlag == 0)); then
      cat <<END


-- Материализованные представления

END
      headerFlag=1
    fi;
    echo "@oms-run "${mviewFileName}
  done;
  headerFlag=0
  for constraintFileName in \
    $(find "$rootDir/DB/Install/Schema/Last/"* -maxdepth 0 -name *.con -exec basename {} \; | sort); do
    if (( headerFlag == 0)); then
      cat <<END


-- Outline-ограничения целостности

END
      headerFlag=1
    fi;
    echo "@oms-run "${constraintFileName}
  done;
}



# func: exec_gen-schema-run
# Генерирует файл DB/Install/Schema/run.sql ( выполнение команды
# <gen-schema-run>).
exec_gen-schema-run()
{
  local schemaDir="$rootDir/DB/Install/Schema/Last"
  if [[ ! -d "$schemaDir" ]]; then
    exitError "Schema dir \"$schemaDir\" does not exist."
  fi
  local runFilePath="$schemaDir/run.sql"
  local runFilePathTemp=${runFilePath}".$$"
  getModuleEncoding "$rootDir"
  gen-schema-run_file | unix2dos > $runFilePathTemp
  if (( isConvertModuleEncoding )); then
    iconv -f "utf-8" -t "$moduleEncoding" \
      "$runFilePathTemp" >"$runFilePath"
  else
    cp $runFilePathTemp $runFilePath
  fi
  rm -f $runFilePathTemp;
}



# group: show-svn-info
# Возвращает информацию о файлах модуля из Subversion
# ( см. <exec_show-svn-info>).



# func: usage_show-svn-info
# Выводит информацию об использовании команды <show-svn-info>.
#
usage_show-svn-info()
{
  cat <<END
Show information about module's files from Subversion.

Usage:
  oms show-svn-info [<options>]

Options:
      --debug-level DBG_LEVEL set level for print debug information ( 0 - 3)
  -d, --directory DIR         path to module root directory ( default: current)
  -h, --help                  show this help
      --quiet                 minimize output
                              ( string with format: "<svnversion> <svn_path>")
END
}



# func: parseOption_show-svn-info
# Разбор параметров команды <show-svn-info>.
#
parseOption_show-svn-info()
{
  logDebug2 "start[$#]:" "$@"
  while [ $# != 0 ]; do
    processCommonOption "$@"
    if ! (( processCommonOptionCount )); then
      case $1 in
        --quiet)
          isQuiet=1
          logDebug3 "Set isQuiet: $isQuiet"
          ;;
        -* | --*)
          exitArgError "Illegal command option: '$1'."
          ;;
        *)
          exitArgError "Illegal command argument: '$1'."
          ;;
      esac
      shift
    else
      shift $processCommonOptionCount
    fi
  done
}



# func: exec_show-svn-info
# Возвращает информацию о файлах модуля из Subversion ( выполнение команды
# <show-svn-info>).
#
# Параметры выполнения:
# isQuiet                     - сокращенный режим вывода
#
# В сокращенном режиме вывода выводится строка формате
# "<svnversion> <svn_path>", где:
# svnversion                  - информация о версии файлов, возвращаемая
#                               командой svnversion ( входит в состав
#                               Subversion, подробнее см. "svnversion --help")
# svn_path                    - путь в Subversion, из которого были получены
#                               файлы модуля ( начиная с имени репозитария)
#
#
exec_show-svn-info()
{
  logDebug2 "start: ..."
  local execResult=0
  local version=""

  # Определяем svnModuleRootFilePath
  getSvnModuleRoot "$rootDir"
  if [[ -n $svnModuleRootFilePath ]]; then
    version="$(svnversion --quiet --no-newline "$rootDir")"
    if (( $? )) || [[ -z $version ]]; then
      exitError \
          "error on get svnversion for path: '$rootDir'"
    fi
  fi

  logDebug "SVN path: '$svnModuleRootFilePath'"
  logDebug "SVN version info: '$version'"
  if (( isQuiet )); then
    if [[ -n "$version" ]]; then
      echo "$version $svnModuleRootFilePath"
    fi
  else
    echo "SVN path         : $svnModuleRootFilePath"
    echo "SVN version info : $version"
  fi

  logDebug3 "finished: return $execResult"
  return $execResult
}



# group: set-version
# Установка текущей версии модуля ( см. <exec_set-version>).



# func: usage_set-version
# Выводит информацию об использовании команды <set-version>.
#
usage_set-version()
{
  cat <<END
Set module version.

Usage:
  oms set-version [<options>] VERSION

Arguments:
  VERSION             - new version number ( digits delimited by dot, for
                        example "1.5.0")
Options:
      --debug-level DBG_LEVEL set level for print debug information ( 0 - 3)
  -d, --directory DIR         path to module root directory ( default: current)
  -n, --dry-run               don't actually run any commands; just print them
  -h, --help                  show this help
      --quiet                 minimize output ( print only new version number)
      --used-only             set version number only if it used in module
END
}



# func: parseOption_set-version
# Разбор параметров команды <set-version>.
#
parseOption_set-version()
{
  logDebug2 "start[$#]:" "$@"
  while [ $# != 0 ]; do
    processCommonOption "$@"
    if ! (( processCommonOptionCount )); then
      case $1 in
        -n | --dry-run)
          setDryRun
          ;;
        --quiet)
          isQuiet=1
          logDebug3 "Set isQuiet: $isQuiet"
          ;;
        --used-only)
          isUsedOnly=1
          logDebug3 "Set isUsedOnly: $isUsedOnly"
          ;;
        -* | --*)
          exitArgError "Illegal command option: '$1'."
          ;;
        *)
          if [[ -n $moduleVersion ]]; then
            exitArgError "Illegal command argument: '$1'."
          fi
          if [[ -z ${1//[0-9]*/} ]] && [[ -z ${1//*[0-9]/} ]]; then
            local s=${1//[0-9]/}
            if [[ -z ${s//./} ]]; then
              moduleVersion="$1"
              logDebug3 "Set moduleVersion: '$moduleVersion'"
            fi
          fi
          if [[ -z $moduleVersion ]]; then
            exitArgError "Bad version value: '$1'"
          fi
          ;;
      esac
    elif (( processCommonOptionCount > 1 )); then
      local i=$processCommonOptionCount
      while (( --i )); do shift; done
    fi
    shift
  done

  # Проверяем параметры
  if [[ -z "$moduleVersion" ]]; then
    exitArgError "Version not expected."
  fi
}



# func: exec_set-version
# Устанавливает текущую версию модуля ( выполнение команды <set-version>).
# При выполнении команды обновляется значение в тэге "<version>" map-файла
# ( Doc/map.xml) и в тэге SubTitle меню автодокументации
# ( DB/OmsModule/NaturalDocs/Menu.txt).
#
# Параметры выполнения:
# isUsedOnly                  - флаг установки номера версии только в том
#                               случае, если он используется в модуле
# isQuiet                     - сокращенный режим вывода ( выводится только
#                               номер версии, если она была установлена)
#
#
# Замечания:
# - использование версии в модуле подтверждается наличием подкаталогов в
#   с номером версии в ветке DB/Install либо документированием версии в
#   файле DB/Doc/version.txt ( по наличию строки, соответствующей шаблону
#   "group:[[:space:]]*$moduleVersion[[:space:]]")
# - в случае, если установка версии не выполнялась по условию, функция
#   возвращает <oms-common.sh::E_FALSE_RESULT>;
# - новая версия будет показана в меню документации после обновления докуменации
#   c помощью команды 'make gendoc';
#
exec_set-version()
{
  logDebug2 "start: ..."
  local execResult=1
  local isUsed=""
  if (( isUsedOnly )); then
    isUsed=0
    local checkDir=""
    local versionDir=""
    for checkDir in Config Data Grant Schema; do
      versionDir="$rootDir/DB/Install/$checkDir/$moduleVersion";
      if [[ -d $versionDir ]]; then
        isUsed=1
        logDebug2 "version used: directory found: '$versionDir'"
        break;
      else
        logDebug3 "check used: directory not found: '$versionDir'"
      fi
    done
    local checkFile="$rootDir/DB/Doc/version.txt"
    if (( ! isUsed )) && [[ -r $checkFile ]]; then
      if grep --ignore-case --quiet \
            "group:[[:space:]]*${moduleVersion//./\\.}[[:space:]]" \
            "$checkFile"; \
          then
        isUsed=1
        logDebug2 "version used: found in '$checkFile'"
      else
        logDebug3 "check used: version not found in '$checkFile'"
      fi
    fi
  fi
  if (( isUsedOnly && ! isUsed )); then
    logDebug "skip set version ( not used): '$moduleVersion'"
    if (( ! isQuiet )); then
      printMessage "Skip set version ( not used): $moduleVersion"
    fi
  else
    local dstFile="$rootDir/Doc/map.xml"
    $runCmd sed --in-place \
      -e "s|<version>.*</version>|<version>$moduleVersion</version>|" \
      -e 's/\x0D//g' \
      -e 's/$/\x0D/' \
      "$dstFile" \
      || exitError "error on set version in map file: '$dstFile'"
    dstFile="$rootDir/DB/OmsModule/NaturalDocs/Menu.txt"
    local versionExpr="s|^SubTitle:.*|SubTitle: Версия $moduleVersion|"
    getModuleEncoding "$rootDir"
    if (( isConvertModuleEncoding )); then
      versionExpr=$(
        iconv -f "utf-8" -t "$moduleEncoding" <<<$versionExpr
      )
    fi
    $runCmd sed --in-place \
      -e "$versionExpr" \
      "$dstFile" \
      || exitError \
        "error on set version in SubTitle of documentation menu: '$dstFile'"
    execResult=0
    logDebug "set module version: '$moduleVersion'"
    if (( isQuiet )); then
      echo "$moduleVersion"
    else
      printMessage "module version changed: $moduleVersion ( please, run \"make gendoc\")"
    fi
  fi
  logDebug3 "finished: return $execResult"
  return $execResult
}



# Разбор параметров
parseOption "$@"

# Выполняем команду
if [[ -n ${commandScriptList["$omsCommand"]} ]]; then
  execCommandScript "$@"
else
  exec_$omsCommand
fi

# Завершаем выполнение
exitScript "$?"
